<?xml version="1.0" encoding="utf-8"?>
<!--GoogleVRHMD plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="GoogleVRHMD init"/>
    
    <!-- Check for desired scanline racing -->
    <setBoolFromProperty result="bGoogleVRScanlineRacing" ini="Engine" section="/Script/AndroidRuntimeSettings.AndroidRuntimeSettings" property="bGoogleVRScanlineRacing" default="false"/>
    <if condition="bGoogleVRScanlineRacing">
      <true>
		    <log text="Scanline racing is desired"/>
      </true>
    </if>
    
    <!-- Check for desired sustained-performance -->
    <setBoolFromProperty result="bGoogleVRSustainedPerformance" ini="Engine" section="/Script/AndroidRuntimeSettings.AndroidRuntimeSettings" property="bGoogleVRSustainedPerformance" default="false"/>
    <if condition="bGoogleVRSustainedPerformance">
      <true>
		    <log text="Sustained-performance mode is desired"/>
      </true>
    </if>
	</init>
	
	<!-- optional files or directories to copy to Intermediate/Android/APK -->
	<resourceCopies>
    <log text="Copying GoogleVR runtime files to staging"/>
		<isArch arch="armeabi-v7a">
      <copyFile src="$S(EngineDir)/Source/ThirdParty/GoogleVR/lib/android_arm/libgvr.so"
						dst="$S(BuildDir)/libs/armeabi-v7a/libgvr.so" />
		</isArch>
		<isArch arch="arm64-v8a">
      <copyFile src="$S(EngineDir)/Source/ThirdParty/GoogleVR/lib/android_arm64/libgvr.so"
						dst="$S(BuildDir)/libs/arm64-v8a/libgvr.so" />
		</isArch>
		<isArch arch="x86">
      <copyFile src="$S(EngineDir)/Source/ThirdParty/GoogleVR/lib/android_x86/libgvr.so"
						dst="$S(BuildDir)/libs/x86/libgvr.so" />
		</isArch>
		<isArch arch="x86_64">
      <copyFile src="$S(EngineDir)/Source/ThirdParty/GoogleVR/lib/android_x86_64/libgvr.so"
						dst="$S(BuildDir)/libs/x86_64/libgvr.so" />
		</isArch>
	</resourceCopies>
	
	<!-- Files to copy before the build so they can be used in the build -->
	<prebuildCopies>
    <log text="Copying GoogleVR buildtime files to staging"/>
    <copyDir src="$S(EngineDir)/Source/ThirdParty/GoogleVR/lib/common_library"
					dst="$S(BuildDir)/JavaLibs/common_library" />
	</prebuildCopies>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      -keep class com.google.** {
      *;
      }
    </insert>
  </proguardAdditions>
  
	<!-- optional updates applied to AndroidManifest.xml -->
	<androidManifestUpdates>
    <addFeature android:name="android.software.vr.mode" android:required="false"/>
    <addFeature android:name="android.hardware.vr.high_performance" android:required="false"/>
	</androidManifestUpdates>

  <gameActivityImportAdditions>
    <insert>
      import com.google.vr.ndk.base.GvrLayout;
      import com.google.vr.ndk.base.GvrUiLayout;
      import com.google.vr.ndk.base.AndroidNCompat;
      import android.view.ViewGroup;
      import android.widget.ImageButton;
      import android.os.PowerManager;
      import android.content.pm.PackageManager;
      import android.content.pm.PackageManager.NameNotFoundException;
      import android.os.Build.VERSION;
    </insert>
  </gameActivityImportAdditions>
  
  <gameActivityClassAdditions>
    <insert>
      private GvrLayout gvrLayout;
      private GvrUiLayout gvrUiLayout;
      private boolean bScanlineRacingEnabled;
      
      public native void nativeOnUiLayerBack();
        
      public void AndroidThunkJava_UiLayer_SetEnabled(boolean bEnable)
      {
			  _activity.gvrUiLayout.getUiLayer().setEnabled(bEnable);
      }
        
      public void AndroidThunkJava_UiLayer_SetSettingsButtonEnabled(boolean bEnable)
      {
			  _activity.gvrUiLayout.setSettingsButtonEnabled(bEnable);
      }
        
      public void AndroidThunkJava_UiLayer_SetAlignmentMarkerEnabled(boolean bEnable)
      {
			  _activity.gvrUiLayout.setAlignmentMarkerEnabled(bEnable);
      }
        
      public void AndroidThunkJava_UiLayer_SetTransitionViewEnabled(boolean bEnable)
      {
			  _activity.gvrUiLayout.setTransitionViewEnabled(bEnable);
      }
      
      public void AndroidThunkJava_UiLayer_SetBackButtonEnabled(boolean bEnable)
      {
        if(bEnable)
        {
          _activity.gvrUiLayout.setBackButtonListener
          (
            new Runnable()
			      {
				      @Override
				      public void run()
				      {
			          nativeOnUiLayerBack();
				      }
			      }
          );
        }
        else
        {
          _activity.gvrUiLayout.getUiLayer().setSettingsButtonRunnable(null);
        }
      }

      public boolean AndroidThunkJava_UiLayer_GetTransitionViewEnabled()
      {
        return _activity.gvrUiLayout.getUiLayer().getTransitionViewEnabled();
      }

      public boolean AndroidThunkJava_UiLayer_GetSettingsButtonEnabled()
      {
        return _activity.gvrUiLayout.getUiLayer().getSettingsButtonEnabled();
      }

      public boolean AndroidThunkJava_UiLayer_GetAlignmentMarkerEnabled()
      {
        return _activity.gvrUiLayout.getUiLayer().getAlignmentMarkerEnabled();
      }

      public boolean AndroidThunkJava_UiLayer_GetBackButtonEnabled()
      {
        return _activity.gvrUiLayout.getUiLayer().getBackButtonEnabled();
      }
      
      public void AndroidThunkJava_UiLayer_SetViewerName(String viewerName)
      {
			  _activity.gvrUiLayout.getUiLayer().setViewerName(viewerName);
      }
      
      public long AndroidThunkJava_GetNativeGVRApi()
      {
        return _activity.gvrLayout.getGvrApi().getNativeGvrContext();
      }
      
      public boolean AndroidThunkJava_IsScanlineRacingEnabled()
      {
        return bScanlineRacingEnabled;
      }
      
      public void AndroidThunkJava_GvrLayout_SetFixedPresentationSurfaceSizeToCurrent()
      {
        // Setup hardware scaling
        gvrLayout.setFixedPresentationSurfaceSize(DesiredHolderWidth, DesiredHolderHeight);
      }
    </insert>
    
    <!-- Function to support scanline racing -->
    <if condition="bGoogleVRScanlineRacing">
      <true>
        <insert>
          public boolean ProjectWantsScanlineRacing()
          {
            return true;
          }
        </insert>
      </true>
      <false>
        <insert>
          public boolean ProjectWantsScanlineRacing()
          {
            return false;
          }
        </insert>
      </false>
    </if>
    
    <!-- Function to support sustained-performance -->
    <if condition="bGoogleVRSustainedPerformance">
      <true>
        <insert>
          public boolean ProjectWantsSustainedPerformance()
          {
            return true;
          }
        </insert>
      </true>
      <false>
        <insert>
          public boolean ProjectWantsSustainedPerformance()
          {
            return false;
          }
        </insert>
      </false>
    </if>
  </gameActivityClassAdditions>
  
  <gameActivityOnPauseAdditions>
    <insert>
      if(gvrLayout != null)
      {
        gvrLayout.onPause();
      }
    </insert>
  </gameActivityOnPauseAdditions>
  
  <gameActivityOnResumeAdditions>
    <insert>
      if(gvrLayout != null)
      {
        gvrLayout.onResume();
      }
    </insert>
  </gameActivityOnResumeAdditions>

  <gameActivityOnCreateAdditions>
    <insert>
      // Create the Layout and override the content view
      gvrLayout = new GvrLayout(this);
      ((ViewGroup)MySurfaceView.getParent()).removeView(MySurfaceView);
      gvrLayout.setPresentationView(MySurfaceView);
      setContentView(gvrLayout);
      
      // Create the ui layer
      gvrUiLayout = new GvrUiLayout(this);
      gvrUiLayout.setAlignmentMarkerEnabled(true);
      gvrUiLayout.getUiLayer().setEnabled(false);
      gvrLayout.addView(gvrUiLayout);

      // Attempt to enable scan line racing. Only supported on some platforms.
      if(ProjectWantsScanlineRacing())
      {
        bScanlineRacingEnabled = gvrLayout.setScanlineRacingEnabled(true);
      }
      else
      {
        bScanlineRacingEnabled = false;
      }

      // Attempt to enable VR Mode. Only supported on some platforms. Check done internally.
      AndroidNCompat.setVrModeEnabled(this, true);
        
      // Attempt to enable sustained-performance mode
      if(ProjectWantsSustainedPerformance())
      {
        AndroidNCompat.setSustainedPerformanceMode(this, true);
      }
    </insert>
  </gameActivityOnCreateAdditions>

  <gameActivityOnStartAdditions>
    <insert>
    </insert>
  </gameActivityOnStartAdditions>
  
  <!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
    <loadLibrary name="gvr" failmsg="GoogleVR library not loaded and required!" />
	</soLoadLibrary>
</root>
