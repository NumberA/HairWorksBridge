// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LightMapDensityShader.hlsl: Shader for rendering lightmap density as a color
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

struct FVertexDensityVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float4 WorldPosition	: TEXCOORD6;
	float4 Position			: SV_POSITION;
};

void MainVS(FVertexFactoryInput Input, out FVertexDensityVSToPS Output)
{
	ResolvedView = ResolveView();
	
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentToLocal);
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);

	Output.WorldPosition = WorldPosition;
	ISOLATE
	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, Output.WorldPosition);
		Output.Position = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);
	}
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
}

float2 TriangleSize;

[maxvertexcount(12)]
void MainGS(triangle FVertexDensityVSToPS Input[3], inout TriangleStream<FVertexDensityVSToPS> TriStream )
{
	// Size in pixels
	float2 SizeInClip = TriangleSize * Frame.ViewSizeAndInvSize.zw;

	int i;

	// Regular triangle
	for (i = 0; i < 3; ++i)
	{
		FVertexDensityVSToPS T = Input[i];
		T.WorldPosition.w = 1;
		TriStream.Append(T);
	}
	TriStream.RestartStrip();

	// Smaller triangle
	for (i = 0; i < 3; ++i)
	{
		FVertexDensityVSToPS T = Input[i];
		T.WorldPosition.w = 0;
		TriStream.Append(T);
		T.Position.x += SizeInClip.x * T.Position.w;
		TriStream.Append(T);
		T.Position.y += SizeInClip.y * T.Position.w;
		TriStream.Append(T);

		TriStream.RestartStrip();
	}
}

float4 MainPS(FVertexDensityVSToPS Input) : SV_Target0
{
	ResolvedView = ResolveView();

	if (Input.WorldPosition.w < 1e-6)
	{
		return float4(normalize(Input.WorldPosition).xyz * 0.5 + float3(0, 0.25, 0), 0.5);
	}
	else
	{
		FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Input.FactoryInterpolants, Input.WorldPosition);
		FPixelMaterialInputs PixelMaterialInputs;
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, Input.Position, false);
		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);
		float3 Color = MaterialParameters.AOMaterialMask + MaterialParameters.VertexColor.xyz;
		Color = normalize(Color) * 0.5 + float3(0, 0, 0.25);
		return float4(Color, 0.25);
	}
}
