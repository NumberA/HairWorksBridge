// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	QuadOverdrawVertexShader.hlsl: Quad complexity viewmode vertex shader.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"


struct FQuadComplexityVSToPS
{
	float4 Position : SV_POSITION;
};

#if USING_TESSELLATION	
	struct FQuadComplexityVSToDS
	{
		FVertexFactoryInterpolantsVSToDS FactoryInterpolants;
		float4 Position : VS_To_DS_Position;
		OPTIONAL_VertexID_VS_To_DS
	};
	
	#define FQuadComplexityVSOutput FQuadComplexityVSToDS
#else
	#define FQuadComplexityVSOutput FQuadComplexityVSToPS
#endif

#if USING_TESSELLATION	
	#define FPassSpecificVSToDS FQuadComplexityVSToDS
	#define FPassSpecificVSToPS FQuadComplexityVSToPS
	
	FQuadComplexityVSToDS PassInterpolate(FQuadComplexityVSToDS a, float aInterp, FQuadComplexityVSToDS b, float bInterp)
	{
		FQuadComplexityVSToDS O;
		
		O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);

		return O;
	}

	FQuadComplexityVSToPS PassFinalizeTessellationOutput(FQuadComplexityVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
	{
		FQuadComplexityVSToPS O;
		
		// Finally, transform position to clip-space
		ISOLATE
		{
			O.Position = mul(WorldPosition, ResolvedView.TranslatedWorldToClip);
		}

		return O;
	}
	
	#include "Tessellation.usf"
#endif

#if VERTEXSHADER

void Main(
	FVertexFactoryInput Input,
	OPTIONAL_VertexID
	out FQuadComplexityVSOutput Output
#if INSTANCED_STEREO
	, uint InstanceId : SV_InstanceID
	, out float4 OutClipDistance : SV_ClipDistance
	, out float4 OutCullDistance : SV_CullDistance
#endif
	)
{
#if INSTANCED_STEREO
	OutCullDistance = OutClipDistance = 0.0;
	const uint EyeIndex = VertexFactoryGetEyeIndex(InstanceId);
	ResolvedView = ResolveView(EyeIndex);
#else
	ResolvedView = ResolveView();
#endif

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);

	// Isolate instructions used for world position offset
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	ISOLATE
	{
		WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}

#if USING_TESSELLATION
	// Transformation is done in Domain shader when tessellating
	Output.Position = WorldPos;
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates, VertexParameters);

#if INSTANCED_STEREO
	Output.FactoryInterpolants.InterpolantsVSToPS.PackedEyeIndex = PackEyeIndex(EyeIndex, bIsInstancedStereo);
#endif

#else
	ISOLATE
	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);
		Output.Position = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);

		#if INSTANCED_STEREO
		BRANCH
		if (bIsInstancedStereo)
		{
			// Clip at the center of the screen
			OutCullDistance.x = OutClipDistance.x = dot(Output.Position, EyeClipEdge[EyeIndex]);

			// Scale to the width of a single eye viewport
			Output.Position.x *= 0.5 * Frame.HMDEyePaddingOffset;

			// Shift to the eye viewport
			Output.Position.x += (EyeOffsetScale[EyeIndex] * Output.Position.w) * (1.0f - 0.5 * Frame.HMDEyePaddingOffset);
		}
		#endif
	}
#endif

	OutputVertexID( Output );
}

#endif // VERTEXSHADER
