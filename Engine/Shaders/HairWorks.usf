// @third party code - BEGIN HairWorks
#include "GeneratedUniformBuffers.usf" 
#include "ShaderVersion.usf"
#include "Common.usf"
#include "ReflectionEnvironmentShared.usf"
#include "BRDF.usf"
#include "SHCommon.usf"
#include "DeferredShadingCommon.usf"
#include "CubemapCommon.usf"
struct FVertexFactoryInterpolantsVSToPS
{};
#include "ShadowDepthCommon.usf"

#define NV_HW_DECLARE_VELOCITY_ATTR

#include "NvHwShaderCommon.usf"
#include "HairWorksCommon.usf"

float4 IndirectLightingSHCoefficients[3];

float4 PointSkyBentNormal;

bool bCubemapAmbient;

NvHw_ConstantBuffer HairConstantBuffer;

SamplerState TextureSampler;

Texture2D RootColorTexture;
Texture2D TipColorTexture;
Texture2D SpecularColorTexture;
Texture2D StrandTexture;

NV_HW_INDICES_BUFFER_TYPE NvHw_resourceFaceHairIndices;
NV_HW_TANGENT_BUFFER_TYPE NvHw_resourceTangents;
NV_HW_NORMAL_BUFFER_TYPE NvHw_resourceNormals;
NV_HW_POSITION_BUFFER_TYPE NvHw_resourceMasterPositions;
NV_HW_POSITION_BUFFER_TYPE NvHw_resourceMasterPrevPositions;
NV_HW_DECLARE_DEFAULT_SHADER_ATTRIBUTE_FUNC;

float ShadowDepthMain(in float4 Position : SV_Position) : SV_Depth
{
	return Position.z * Position.w * ShadowParams.y + ShadowParams.x;
}

float CopyDepthPs(FScreenVertexOutput Input) : SV_Depth
{
	return SceneDepthTexture[Input.Position.xy].r;
}

Texture2DMS<float4> VelocityTexture;
Texture2DMS<float> DepthTexture;
Texture2DMS<uint> StencilTexture;

float4 CopyVelocityPs(FScreenVertexOutput Input): SV_Target0
{
	uint2 Size;
	uint SampleNum;
	VelocityTexture.GetDimensions(Size.x, Size.y, SampleNum);

	float NearestDepth = 0;
	uint NearestSample;
	for(uint i = 0; i < SampleNum; ++i)
	{
		float Depth = DepthTexture.Load(Input.Position.xy, i);
		if(Depth > NearestDepth)
		{
			NearestDepth = Depth;
			NearestSample = i;
		}
	}

	float4 Velocity = VelocityTexture.Load(Input.Position.xy, NearestSample);
	if(!any(Velocity.xy))
		discard;

	return Velocity;
}

float ResolveDepthPs(FScreenVertexOutput Input) : SV_Depth
{
	uint2 Size;
	uint SampleNum;
	DepthTexture.GetDimensions(Size.x, Size.y, SampleNum);

	float NearestDepth = 0;
	for(uint i = 0; i < SampleNum; ++i)
	{
		uint Stencil = StencilTexture.Load(Input.Position.xy, i);
		if(Stencil == 0)
			continue;

		float Depth = DepthTexture.Load(Input.Position.xy, i);
		if(Depth > NearestDepth)
		{
			NearestDepth = Depth;
		}
	}

	return NearestDepth;
}

Texture2DMS<float4> HairColorTexture;

float ResolveOpaqueDepthPs(FScreenVertexOutput Input): SV_Depth
{
	uint2 Size;
	uint SampleNum;
	DepthTexture.GetDimensions(Size.x, Size.y, SampleNum);

	float NearestDepth = 0;
	for(uint i = 0; i < SampleNum; ++i)
	{
		float Opaque = HairColorTexture.Load(Input.Position.xy, i).a;
		if(Opaque < 1)
			discard;

		float Depth = DepthTexture.Load(Input.Position.xy, i);
		if(Depth > NearestDepth)
		{
			NearestDepth = Depth;
		}
	}

	return NearestDepth;
}

struct FBasePassOut
{
	float4 GBufferA : SV_Target0;
	float4 GBufferB : SV_Target1;
	float4 GBufferC : SV_Target2;
	float4 PrecomputedLight : SV_Target3;
	float2 Velocity : SV_Target4;
};

FBasePassOut ComposeGBuffer(FHairScreenSpaceData HairScreenSpaceData, float3 RecomputedLight, float2 Velocity)
{
	FBasePassOut Output;
	Output.GBufferA.xy = mad(UnitVectorToOctahedron(HairScreenSpaceData.Normal), 0.5, 0.5);
	Output.GBufferA.zw = mad(UnitVectorToOctahedron(HairScreenSpaceData.Tangent), 0.5, 0.5);

	Output.GBufferB.rgb = Diffuse_Lambert(HairScreenSpaceData.Color);
	Output.GBufferB.w = HairScreenSpaceData.Glint;

	Output.GBufferC.rgb = Diffuse_Lambert(HairScreenSpaceData.Specular);
	Output.GBufferC.w = mad(HairScreenSpaceData.SpecularPrimaryOffset, 0.5, 0.5);
	
	Output.PrecomputedLight.rgb = RecomputedLight * HairScreenSpaceData.Color;
	Output.PrecomputedLight.a = HairScreenSpaceData.Opaque;

	Output.Velocity.xy = EncodeVelocityToTexture(Velocity);

	return Output;
}

FBasePassOut BasePassPs(NvHw_PixelShaderInput Input)
{
	// Shader attributes
	NvHw_ShaderAttributes ShaderAttributes = NvHw_GetShaderAttributes(Input, HairConstantBuffer);

	float3 HairColor = NvHw_SampleHairColorStrandTex(
		HairConstantBuffer,
		HairConstantBuffer.defaultMaterial,
		TextureSampler,
		RootColorTexture,
		TipColorTexture,
		StrandTexture,
		ShaderAttributes.texcoords
		);

	// Hair Specular
	if(HairConstantBuffer.useSpecularTexture)
		HairConstantBuffer.defaultMaterial.specularColor.rgb = SpecularColorTexture.SampleLevel(TextureSampler, ShaderAttributes.texcoords.xy, 0).rgb;

	// Hair opaque
	float HairOpaque = NvHw_ComputeAlpha(
		HairConstantBuffer,
		HairConstantBuffer.defaultMaterial,
		ShaderAttributes
		);

	// Glint
	float Glint = 0;
	if(HairConstantBuffer.defaultMaterial.glintStrength > 0)
	{
		Glint = NvHw_ComputeHairGlint(
			HairConstantBuffer,
			HairConstantBuffer.defaultMaterial,
			ShaderAttributes
			);

		HairConstantBuffer.defaultMaterial.specularColor.rgb *= lerp(1.0, Glint, HairConstantBuffer.defaultMaterial.glintStrength);
	}

	// Sky light
	float3 RecomputedLight = 0;
	{
		float SkyVisibility = 1;
		float GeometryTerm = 1;
		float3 SkyLightingNormal = ShaderAttributes.N;

		if(Frame.SkyLightParameters.x > 0)
		{
			float3 NormalizedBentNormal = PointSkyBentNormal.xyz;
			SkyVisibility = PointSkyBentNormal.w;

			float BentNormalWeightFactor = 1 - (1 - SkyVisibility) * (1 - SkyVisibility);
			float3 SkyLightingNormal = lerp(NormalizedBentNormal, ShaderAttributes.N, BentNormalWeightFactor);

			float DotProductFactor = lerp(saturate(dot(NormalizedBentNormal, ShaderAttributes.N)), 1, BentNormalWeightFactor);
			GeometryTerm = DotProductFactor;
		}

		RecomputedLight += GetSkySHDiffuse(SkyLightingNormal) * Frame.SkyLightColor.rgb * (SkyVisibility * GeometryTerm);
	}

	// Indirect light
	{
		FTwoBandSHVectorRGB PointIndirectLighting;
		PointIndirectLighting.R.V = IndirectLightingSHCoefficients[0];
		PointIndirectLighting.G.V = IndirectLightingSHCoefficients[1];
		PointIndirectLighting.B.V = IndirectLightingSHCoefficients[2];

		FTwoBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH(ShaderAttributes.N.xyz, 1);
		float3 IndirectLight = max(half3(0, 0, 0), DotSH(PointIndirectLighting, DiffuseTransferSH));

		IndirectLight *= Frame.IndirectLightingColorScale;

		RecomputedLight += IndirectLight;
	}

	// Ambient light
	if(bCubemapAmbient)
	{
		float3 DiffuseLookup = TextureCubeSampleLevel(AmbientCubemap, AmbientCubemapSampler, ShaderAttributes.N.xyz, AmbientCubemapMipAdjust.z).rgb;
		RecomputedLight += AmbientCubemapColor.rgb * DiffuseLookup;
	}

	// Velocity
	float2 Velocity = ShaderAttributes.wVel.xy;
	Velocity.y = -Velocity.y;
	Velocity = Velocity / (Frame.ViewSizeAndInvSize.xy / 2.0) - (View.ViewToClip[2].xy - View.PrevProjection[2].xy);
	
	// Specular breakup
	uint	hash = asuint(ShaderAttributes.hairID * 17938401.0f);
	float	noiseVal = float(hash % 1024) / 1024.0f;
	float	signedNoise = noiseVal - 0.5f;
	float SpecularPrimaryOffset = HairConstantBuffer.defaultMaterial.specularPrimaryBreakup * signedNoise;

	// Visualization
	float3 VisualizeColor;
	bool bVisualize = NvHw_VisualizeColor(
		HairConstantBuffer,
		HairConstantBuffer.defaultMaterial,
		ShaderAttributes,
		VisualizeColor
		);

	// Output
	FHairScreenSpaceData HairScreenSpaceData;
	HairScreenSpaceData.Normal = ShaderAttributes.N;
	HairScreenSpaceData.Tangent = ShaderAttributes.T;
	HairScreenSpaceData.Color = HairColor;
	HairScreenSpaceData.Glint = Glint;
	HairScreenSpaceData.Specular = HairConstantBuffer.defaultMaterial.specularColor.rgb;
	HairScreenSpaceData.SpecularPrimaryScale = HairConstantBuffer.defaultMaterial.specularPrimaryScale;
	HairScreenSpaceData.SpecularPrimaryPower = HairConstantBuffer.defaultMaterial.specularPrimaryPower;
	HairScreenSpaceData.SpecularPrimaryOffset = SpecularPrimaryOffset;
	HairScreenSpaceData.SpecularSecondaryScale = HairConstantBuffer.defaultMaterial.specularSecondaryScale;
	HairScreenSpaceData.SpecularSecondaryPower = HairConstantBuffer.defaultMaterial.specularSecondaryPower;
	HairScreenSpaceData.SpecularSecondaryOffset = HairConstantBuffer.defaultMaterial.specularSecondaryOffset;
	HairScreenSpaceData.Opaque = HairOpaque;
	HairScreenSpaceData.DiffuseBlend = HairConstantBuffer.defaultMaterial.diffuseBlend;

	// Override with visualization color
	if(bVisualize)
	{
		HairScreenSpaceData.Color = 1;
		HairScreenSpaceData.Specular = 0;
		HairScreenSpaceData.Normal = 0;
		HairScreenSpaceData.Tangent = 0;

		RecomputedLight = VisualizeColor;
	}

	return ComposeGBuffer(HairScreenSpaceData, RecomputedLight, Velocity);
}

float4 ColorizePs(NvHw_PixelShaderInput Input): SV_Target0
{
	// Shader attributes
	NvHw_ShaderAttributes ShaderAttributes = NvHw_GetShaderAttributes(Input, HairConstantBuffer);

	float3 VisualizeColor;
	NvHw_VisualizeColor(
		HairConstantBuffer,
		HairConstantBuffer.defaultMaterial,
		ShaderAttributes,
		VisualizeColor
		);

	return float4(VisualizeColor, 1);
}

Texture2D<float4> AccumulatedColorTexture;
Texture2DMS<float4> PrecomputedLightTexture;

float4 BlendLightingColorPs(FScreenVertexOutput Input): SV_Target0
{
	uint2 Size;
	uint SampleNum;
	PrecomputedLightTexture.GetDimensions(Size.x, Size.y, SampleNum);

	float4 Color = 0;
	for(uint SampleIdx = 0; SampleIdx < SampleNum; ++SampleIdx)
	{
		Color += PrecomputedLightTexture.Load(Input.Position.xy, SampleIdx);
	}

	if(Color.a <= 0)
		discard;
	
	Color /= SampleNum;

	float3 AccumulatedColor = AccumulatedColorTexture.Load(int3(Input.Position.xy, 0)).rgb;

	Color.rgb += AccumulatedColor;

	return Color;
}
// @third party code - END HairWorks
