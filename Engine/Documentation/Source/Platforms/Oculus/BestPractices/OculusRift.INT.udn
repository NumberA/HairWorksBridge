Availability:Public
Title:Oculus Rift Best Practices
Crumbs:%ROOT%, Platforms, Platforms/Oculus
Description:Information over developing for Oculus Rift.
Navigation:platform
Version: 4.9

[TOC(start:2)]



The Oculus Rift is a Head Mounted Display (HMD) which allows the user to deeply immerse themselves into the worlds and 
games they are viewing or playing. The following guide will help to highlight some information that you need to know 
about when developing content for the Oculus Rift and Unreal Engine 4 (UE4).

## Oculus Rift Sanity Check

Unreal Engine will automatically use an Oculus Rift if it is plugged in and the plug-in is enabled. If for some 
reason the Oculus is not working first check that the plug-In is enabled. You can find the Plugin under Head Mounted 
Displays that is under the [Plug-in](Programming/Plugins) menu.  

[REGION:fullwidth]
![](T_VR_Plug-In_On_00.png)
[/REGION]

If that did not fix your issues the next thing to check is to make sure that the Oculus Rift has been detected. To 
do this, you need to do the following steps:

* First run a [Standalone Game](Engine/UI/LevelEditor/InEditorTesting/Settings#playinstandalonegame). 
* Once the Standalone game has been started, bring up the Unreal Console by using the Backtick (`) key. 
* Then type `showlog`.
* Next type `ovrversion`.
* The current LibOVR version and build date should be printed in the log window like in the following picture:
	[REGION:fullwidth]
	![](T_OculusRiftPluginVersionCheck.jpg)
	[/REGION]
* If the message "Command not recognized: ovrversion" is displayed instead check the following:
	* That the plug-in is enabled. 
	* That you are running UE4 on the Windows platform.
	* That your Oculus Rift is plugged in.
	* That your Oculus Rift is functioning correctly.


[REGION:tip]
If you do all of the above and it still does not work it could be that you have a hardware issues. If this happens to 
you please contact [Oculus VR Support](https://support.oculus.com/hc/en-us). 
[/REGION]


## Checking your work with the Oculus Rift

The Oculus Rift will not work in any of the Editor view ports or during a Play in Editor (PIE) session. The only way 
to view your work is to run a Standalone Game. To run a Standalone game please do the following. 

* Select a Non-PIE game mode like a [Standalone Game](Engine/UI/LevelEditor/InEditorTesting#playineditor). 
* If the game launches in non-full screen, press **ALT+Enter** to full screen the game window or type **fullscreen** in the [Console](GettingStarted/RunningUnrealEngine#usefulin-gamecommands).
* Bring up the [Console](GettingStarted/RunningUnrealEngine#usefulin-gamecommands) (`/backtick) and then type **stereo on**.

## Oculus Specific Config Settings

There are some specific settings for the Oculus that need to be placed in your **DefaultEngine.INI** file to permanently 
set some variables for VR devices. 

[REGION:tip]
 Your `DefaultEngine.ini` is located at `[Path to YourGame]\Config\DefaultEngine.ini`.
[/REGION]

	[Oculus.Settings]
	; In meters, not Unreal Units (cm)
	; Recommended for true first person viewpoint
	; since you are simulating the head.
	;HeadModel_v2=(X=0.0,Y=0,Z=0.0)
	; Default values
	HeadModel_v2=(X=0.12,Y=0,Z=0.17)

## True First Person View

One of the best ways to fully immerse the player in a VR world is to setup a true first person view port. A true first person 
view port is where you take the player camera and position it so that it sits right where the eyes of the player's character 
would be. Inside of UE4 this can be done in the following manner.  

1. First create a Blueprint base on your character of choice. 
1. Next under the [Components Tab](Engine/Blueprints/UserGuide/Components), add a Camera component. 
1. Drag the Camera component over your characters mesh to attach it there.
1. Select the Camera component and change its Parent Socket to the Bone / Socket of your choice. 
1. Adjust the relative [Location & Rotation](Engine/Blueprints/UserGuide/Components#transformingcomponents) if required.
1. Make sure that Camera Setting -> Use Controller View Rotation is enabled. 
1. Make sure the Blueprint is compiled.
1. Set the Default Pawn Class of your game mode to TFP Character. 
1. Zero out the **Virtual Head Model**

## Virtual Head Model

[REGION:note]
If you are using a DK1 headset, you will want to set up a virtual head model. This is not necessary if you are using the DK2 headset.
[/REGION]

The Virtual Head model is used to offset the player's viewpoint. For traditional First Person Shooters the viewport rotates on 
a central axis which is fine. However for a VR game this extra offset is unnecessary and should be zeroed out. 

[REGION:tip]
The dimensions of this virtual head model are determined by the HeadModel_v2 config setting.

	HeadModel_v2=(X=0.12,Y=0,Z=0.17)
[/REGION]

<!--
## Default Head Tracking Behavior

By default, head tracking will affect the players view rotation and movement direction. However if that is not want you want this 
behavior can be altered via C++ or Blueprints. To alter this behavior there are two ways to go about it. 

* Create a new Player Camera Manager, Player Controller & Game Mode using Blueprints.
* Create a new Player Controller, Character & Game Mode using  C++.


In the end the results are similar with the player's view and movement directions separated however you fill find that the C++ version 
is more flexible. Here are examples of you might go about implementing via Blueprints and C++.

**Blueprint Method**

1. Create a Blueprint that based on **PlayerCameraManager**.
1. In the Defaults tab, find **Follow HMD Orientation** and set it to **true**.
1. Create a Blueprint that based on **Player Controller**.
1. In the Defaults tab, find **Player Camera Manager Class** and set it to your **PlayerCameraManager 1** Blueprint.
1. Create a Blueprint that based on **Game Mode**.
1. In the Defaults tab, find Default Controller Class and set it to your **Player Controller** Blueprint.
1. Finally, under your levels **World Settings**, find **Game Mode Override** and set it to your **Game Mode** Blueprint.

**C++ Method**

1.	**Your.Build.cs** - Add **HeadMountedDisplay** to **PublicDependencyModuleNames.**

			PublicDependencyModuleNames.AddRange(new string[] { 
						"Core", 
						"CoreUObject",
						"Engine",
						"InputCore", 
						"HeadMountedDisplay"
					});
			});

1. **YourPlayerController.h**

				virtual void UpdateRotation(float DeltaTime) override;
				UFUNCTION(BlueprintCallable, Category="Pawn")
				FRotator GetViewRotation() const;
				UFUNCTION(BlueprintCallable, Category="Pawn")
				virtual void SetViewRotation(const FRotator& NewRotation);
				virtual void SetControlRotation(const FRotator& NewRotation) override;
 
			protected:
 
				/**
					*  View & Movement direction are now separate.
					*  The controller rotation will determine which direction we will move.
					*  ViewRotation represents where we are looking.
					*/
				UPROPERTY()
				FRotator ViewRotation;

1. **YourPlayerController.cpp**

			// Make sure you include this!!
			#include "IHeadMountedDisplay.h"
 
			void AYourPlayerController::UpdateRotation(float DeltaTime)
			{
				// Calculate Delta to be applied on ViewRotation
				FRotator DeltaRot(RotationInput);
 
				FRotator NewControlRotation = GetControlRotation();
 
				if (PlayerCameraManager)
				{
					PlayerCameraManager->ProcessViewRotation(DeltaTime, NewControlRotation, DeltaRot);
				}
 
				SetControlRotation(NewControlRotation);
 
				if (!PlayerCameraManager || !PlayerCameraManager->bFollowHmdOrientation)
				{
					if (GEngine->HMDDevice.IsValid() && GEngine->HMDDevice->IsHeadTrackingAllowed())
					{
						FQuat HMDOrientation;
						FVector HMDPosition;
 
						// Disable bUpdateOnRT if using this method.
						GEngine->HMDDevice->GetCurrentOrientationAndPosition(HMDOrientation, HMDPosition);
 
						FRotator NewViewRotation = HMDOrientation.Rotator();
 
						// Only keep the yaw component from the controller.
						NewViewRotation.Yaw += NewControlRotation.Yaw;
 
						SetViewRotation(NewViewRotation);
					}
				}
 
				APawn* const P = GetPawnOrSpectator();
				if (P)
				{
					P->FaceRotation(NewControlRotation, DeltaTime);
				}
			}
 
			void AYourPlayerController::SetControlRotation(const FRotator& NewRotation)
			{
				ControlRotation = NewRotation;
 
				// Anything that is overriding view rotation will need to 
				// call SetViewRotation() after SetControlRotation().
				SetViewRotation(NewRotation);
 
				if (RootComponent && RootComponent->bAbsoluteRotation)
				{
					RootComponent->SetWorldRotation(GetControlRotation());
				}
			}
 
			void AYourPlayerController::SetViewRotation(const FRotator& NewRotation)
			{
				ViewRotation = NewRotation;
			}
 
			FRotator AYourPlayerController::GetViewRotation() const
			{
				return ViewRotation;
			}

1. **YourCharacter.h**

				public:
					virtual FRotator GetViewRotation() const override;

1. **YourCharacter.cpp**

			FRotator AYourCharacter::GetViewRotation() const
			{
				if (AYourPlayerController* MYPC = Cast<AYourPlayerController>(Controller))
				{
					return MYPC->GetViewRotation();
				}
				else if (Role < ROLE_Authority)
				{
					// check if being spectated
					for (FConstPlayerControllerIterator Iterator = GetWorld()->GetPlayerControllerIterator(); Iterator; ++Iterator)
					{
						APlayerController* PlayerController = *Iterator;
						if (PlayerController && PlayerController->PlayerCameraManager->GetViewTargetPawn() == this)
						{
							return PlayerController->BlendedTargetViewRotation;
						}
					}
				}
 
				return GetActorRotation();


1. **YourGameMode.cpp**

		AYourGameMode::AYourGameMode(const FObjectInitializer& ObjectInitializer)
			: Super(ObjectInitializer)
		{
			DefaultPawnClass = AYourCharacter::StaticClass();
			PlayerControllerClass = AYourPlayerController::StaticClass();
		}
-->
						

## C++ Functions

There are two main functions, outside of the actual plugin, that are responsible for controlling how the players viewpoint is 
modified by input from the Oculus Rift.

	APlayerController::UpdateRotation()
	APlayerCameraManager::UpdateViewTarget()

## Oculus Reference

Oculus has put a great deal of time and energy into researching how to give the user the best VR experience possible when 
using the Rift. If you have not done so already, it is highly recommend that you check out their [website]( https://developer.oculus.com/) 
as there is a lot of useful information that will help you to develop and deliver the best VR user experience possible.
