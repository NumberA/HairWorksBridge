INTSourceChangelist:0
Availability:Public
Title:Motion Controller Component Setup
Crumbs:%ROOT%, Platforms
Description:Information over how to setup Motion Controllers for VR interaction.
Navigation:platform
Version:4.9
Skilllevel:Intermediate


[TOC(start:2)]

The release of Unreal Engine 4.9 introduces some major changes in how Unreal Engine interfaces with Motion Controllers.
You can now add a Motion Controller as a component to your Pawn / Character, set which "Hand" it is supposed to represent and the Motion Controller is now ready to be used.
In the following document we will cover how you can set up your Virtual Reality project to make use of Motion Controllers.

[region:tip]
Before going any further make sure that your VR Headset and Motion Controllers have been plugged into your PC and their required drivers installed. 
If you have not done so already make sure to check out our other [VR Documents](Platforms/VR) as they contain valuable information on how to get various VR headsets to work with UE4.
[/region]

## Motion Controller Setup

Setting up a VR project to make use of Motion Controllers can be accomplished in a few short steps. 
In the following section we will cover how you can quickly get Motion Controllers working with your project.

1. From the Content Browser open up the Player Pawn Blueprint.

	![](Open_VR_Pawn.png)

	[region:note]
	Please note the following can be applied to any Pawn in any project and does not specifically have to be a VR project.
	[/region]

1. Once the Blueprint is opened, navigate to the **Viewport** tab and in the **Components** section click on the **Add Component** button to expose the components that can be added to this Blueprint. 

	![](Find_Components.png)

1. From the list that is shown search for the Motion Controller using the word **Motion** as the search term. 
	When the Motion Controller component has been located, click on it to add it to the components list.

	[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	kcyHnfpmWbU
	[/PARAMLITERAL]
	[/OBJECT]

1. Once the Motion Controller has been added, select it by clicking on it and then in the **Details** panel under the **Motion Controller** section make sure the **Hand** is set to **Left**.

	![](Setting_Up_Components.png)

1. If you ran the game now the motion controller would work but you would not see anything as by default no visuals are rendered. 
	To fix this add a **Static Mesh Component** to the Components sections and then in the Details section of the Static Mesh Component under the Static Mesh section pick a Static Mesh to use from the dropdown menu.

	[OBJECT:EmbeddedVideo]
	[PARAMLITERAL:width]
	640
	[/PARAMLITERAL]
	[PARAMLITERAL:height]
	360
	[/PARAMLITERAL]
	[PARAMLITERAL:videoid]
	x4vjDqnHQnk
	[/PARAMLITERAL]
	[/OBJECT]

	[region:tip]
	If you do not see any Static Mesh in the Content Browser you will need to either import one or enable **Engine Content** and then select one from there. 
	Also if the Static Mesh you selected is to big or to small you can scale to your likening using the Scale section of the Transform menu.
	[/region]

1. Repeat this process again this time adding a Right Hand and when completed your Pawn Blueprint should look something like the image below.

	![](Finshed_MC_Setup.png)

	[region:note]
	In the image above the the two cone shaped meshes have been moved apart to show that they are two of them. 
	When setting this up for your project leave both mesh at 0,0,0 so that they are located right on top of one another.
	[/region]

## Working with Motion Controllers

Working with Motion Controllers inside UE4 is similar to working with other input devices such as a game-pad or a keyboard. 
If you search inside of the Blueprint Editor **Palette** using **MotionController** as the search term you will see all the available buttons and controls the Motion Controllers have available.

![](Working_With_MC.png)

When looking at the available Motion Controller input options there is a capital **L** or **R** next to the name of what that value is supposed to control. 
This L or R means that this is for the **Left** or **Right** Motion Controller.

![](MC_Left_Right.png)


## Using Motion Controllers

In the following section we will set the Motion Controllers up so that when you press the trigger button on the **Right-Handed** Motion Controller a Blueprint containing a Static Mesh is spawned into the world. 
Then when you press the trigger button on the **Left-Handed** Motion Controller the Blueprint that contains the Static Mesh that was spawned into the world will be removed from the world.

1. Inside of the Content Browser create a new Blueprint and name it **BP_Sphere** and then open it up by double clicking on it.  

1. Once the BP_Sphere Blueprint is open, navigate to the **Viewport** tab and add a new **Static Mesh Component**.

	![](Add_SM_Component.png)

1. Move the Static Mesh Component on top of the **Default Screen Root** and then set the Static Mesh used to the **ArcadeEditorSphere** then compile and save your Blueprint.

	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		PszzV_I0xso
		[/PARAMLITERAL]
	[/OBJECT]

	[region:note]
	If you can not find the **ArcadeEditorSphere** make sure that you have the **Engine Content** folder enabled by going to **View Options** and then clicking on the **Engine Content** folder to enable it showing up in the Content Browser.
	[/region]

1. Close down the BP_Sphere Blueprint and open up your **Pawn** Blueprint then navigate to the **Event Graph** tab.

1. Create a new **Actor** variable with the name **Objects** and set it's **Variable Type** to array.
	
	![](Create_New_Var.png)

1. To create the ability to add objects to the world, inside of the Event Graph add and connect the following Blueprint nodes together. When completed you should have something that looks like the following image.

	![](Add_Objects_Setup.png)

	[region:note]
	The **Spawn Offset** was added to ensure that the objects could be seen while being placed in this example. This is not required for this to work and can be omitted by taking the **Return Value** from the **GetActorTransform** node and inputting that into the **Spawn Transform** input on the **SpawnActor** Blueprint node.
	![](Add_Objects_Setup_Alt.png)
	[/region]

1. Once the Add Objects has been setup select the **Spawn Actor** Blueprint node and in the **Class** section, select the ** BP_Sphere** Blueprint that was created in step one.

	![](Setting_SpawnActor_Up.png)

1. To create the ability to remove the objects that were placed in the world, add and connect the following Blueprint nodes together. When completed you should have something that looks like the following image.

	![](Remove_Objects_Setup.png)

	[region:note]
	The keyboard input keys were placed in the graph for quick testing. You do not have to include those inputs for this to work with Motion Controllers.
	[/region]

1. **Compile** then **Save** the changes to your Pawn Blueprint then press the **Play** button to preview the level. 
	Once the level has started try adding objects to the world by pressing the **K** key on the keyboard or by pressing the Right trigger on the Right Handed Motion Controller. 
	To remove objects from the world press the **T** key on the keyboard or press the **Left** trigger on the Left Handed Motion Controller which you can see demonstrated in the video below.

	[OBJECT:EmbeddedVideo]
		[PARAMLITERAL:width]
		640
		[/PARAMLITERAL]
		[PARAMLITERAL:height]
		360
		[/PARAMLITERAL]
		[PARAMLITERAL:videoid]
		VXUowSUKT9I
		[/PARAMLITERAL]
	[/OBJECT]



