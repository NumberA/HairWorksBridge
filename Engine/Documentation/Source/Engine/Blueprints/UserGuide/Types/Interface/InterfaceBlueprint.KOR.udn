INTSourceChangelist:2690814
Availability:Public
Title:블루프린트 인터페이스 구현
Crumbs: %ROOT%, Engine/Blueprints, Engine/Blueprints/UserGuide/Types/Interface
Description:블루프린트 인터페이스는 블루프린트가 똑같은 인터페이스를 구현하기만 한다면 다른 타겟 유형의 함수를 호출할 수 있도록 해줍니다.
Version: 4.9

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%](Engine\Blueprints\UserGuide\using_interface_topic.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%
	[/PARAM]
	[PARAM:description]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%](Engine\Blueprints\UserGuide\using_interface_topic.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%
	[/PARAM]
	[PARAM:description]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC (start:2)]

## 블루프린트에서 인터페이스 사용

[EXCERPT:intro]
블루프린트 인터페이스를 사용하면 일정한 함수성을 공유하는 다수의 각기 다른 유형의 오브젝트와 공통된 방법으로 
상호작용할 수 있습니다. 즉 차와 나무처럼 완전히 다른 유형의 오브젝트일지라도, 무기로 쏠 수 있다거나 대미지를 입는 등의 
구체적인 것 한 가지를 공유할 수 있다는 것입니다. `OnTakeWeaponFire` 함수가 들어있는 블루프린트 인터페이스 를 만들고, 
차와 나무 둘 다 그 블루프린트 인터페이스 를 구현하게 하면, 차와 나무 둘 다 같은 유형으로 간주해서 
어느 것이 맞았더라도 `OnTakeWeaponFire` 를 호출하기만 하면 됩니다.
[/EXCERPT:intro]


### 인터페이스 추가

블루프린트 인터페이스는 물론 내비티브 코드(C++) 로 정의된 인터페이스도 아무 유형의 [블루프린트](Engine/Blueprints) 에 추가시킬 수 있습니다.

1. 메인 레벨 에디터 창에서, 프로젝트 안의 **레벨 블루프린트** 를 엽니다.

	![](OpenLevelBP.png)(w:640)

1. 상단에 걸쳐있는 [툴바](Engine/Blueprints/Editor/UIComponents/Toolbar) 에서 **클래스 세팅** 버튼을 클릭합니다.

	![](ClassSettings.png)

1. 오른편의 **디테일** 패널에서, **Interfaces** 카테고리를 찾습니다.

1. **인터페이스 추가** 버튼을 클릭하여 사용가능한 인터페이스 목록을 확인한 뒤 사용할 인터페이스를 선택합니다.

	![](InterfacesCategory.png)

	![](InterfacesListPopulated.png)

[REGION:tip]
	인터페이스 제거는 _구현된 인터페이스_ 목록 각각의 옆에 있는 ![](button_X_Remove.png) 버튼을 클릭하여 제거할 수 있습니다. 블루프린트 인터페이스에서 보통 블루프린트 함수로 이주시킬 수도 있습니다. 자세한 정보는 [](Engine/Blueprints\UserGuide\BlueprintComms\InterfaceMigration) 문서를 참고하세요.
[/REGION]

[REGION:note]
	Interfaces 카테고라 내 _Inherited Interfaces_ (상속된 인터페이스) 섹션은 이 오브젝트에 상속된 인터페이스들로 자동 채워집니다 (즉 현재 블루프린트가 파생된 블루프린트에 구현된 것들).
[/REGION]



### 인터페이스 멤버 구현

인터페이스가 블루프린트에 추가되면, 그 블루프린트는 반드시 인터페이스의 함수를 **구현** 해야 
호출시 일정한 동작이 가능합니다. 이는 **이벤트 그래프** 에 인터페이스 함수에 대한 **이벤트** 노드를 놓는 것으로 이루어집니다.
이벤트에 연결된 노드는 함수에 대한 함수성을 정의, 또는 구현합니다.

1. 블루프린트의 **이벤트 그래프** 에 우클릭한 다음 **이벤트 추가 > 이벤트 ...** 를 선택합니다.

	![Implement Interface - Add Event](k2_interface_event_menu.png) ![Implement Interface - Event Node](k2_interface_event_graph.png)

	추가하고자하는 이벤트 유형을 선택하면, 그 이벤트가 그래프에 추가됩니다.

1. 노드 망을 만들고 이벤트의 실행 핀에 연결하여 함수성을 부여합니다.

	![Implement Interface - Event Implementation](k2_interface_event_implementation.png)

	
### 인터페이스 함수 호출

인터페이스의 함수의 실행은 **Interface Message** 노드를 통해 이루어지는데, 이는 외형적으로나 기능적으로 일반 
[](Engine/Blueprints/UserGuide/Functions/FunctionCalls) 와 비슷하나, 타겟이 인터페이스 구현을 하지 않는 경우 조용히 실패한다는 점에서 
살짝 다릅니다.

![Implement Interface - Call Function](k2_interface_event_call.png)


### 다른 블루프린트에서 인터페이스 함수 호출

인터페이스는 각기 다른 블루프린트 사이의 통신을 하는 데 유용하게 쓰입니다. 한 인터페이스의 함수들을 다른 블루프린트에서도 호출할 수 있는 것입니다. 이는 두 가지 조건이 충족되면 가능합니다:

* 두 블루프린트 모두 필요한 함수와 같은 인터페이스를 구현
* 호출하는 블루프린트에서 다른 블루프린트의 게임내 인스턴스 이름을 인지


이벤트 그래프 안에서 Interface Function 노드를 만들 때, 맥락 메뉴에 종종 두 가지 버전의 함수가 나열되는 것이 보일 것입니다.

![](MyFunctionInMenu.png)

중요한 점은, **Call Function** 아래 나열된 버전은 로컬 버전으로, 이 블루프린트 안에서만 호출하기 위한 것입니다.

**Interface Messages** 아래 나열된 버전은 같은 인터페이스를 구현하는 다른 블루프린트에서 인터페이스를 통해 함수를 호출하도록 디자인된 것입니다.

노드 제목 아래 라벨을 통해 구분하는 데 도움이 됩니다:

[REGION:imagetable]
| ![](Local_MyFunction.png)| ![](Interface_MyFunction.png) |
| ------ | ------ |
| 로컬 버전. | 인터페이스 메시지 버전. |
[/REGION]

인터페이스 메시지 함수 호출을 위해서는 함수를 호출하는 적합한 블루프린트 인스턴스를 제공해 주는 것이 필요합니다.

참고로 이 그림에서는 다른 블루프린트를 타겟 입력으로 전송하고 있습니다. 그러면 제공된 블루프린트에서 함수를 호출할 것입니다. 블루프린트가 인터페이스 구현을 하지 않았다면, 아무 일도 일어나지 않을 것입니다.

![](InterfaceMessageFunctionCalled.png)

[REGION:tip]
	레벨 내 존재하는 블루프린트를 지정하려면, Actor 유형 퍼블릭 변수를 만든 다음, 레벨 에디터의 **디테일** 탭에서 해당 변수의 값에 적합한 블루프린트를 할당해 주는 것이 가장 좋습니다.
[/REGION]

### 레벨 블루프린트에서 인터페이스 함수 호출

인터페이스를 통해서는 **Get Streaming Level** 노드를 사용해서 서브레벨간의 통신도 가능합니다. 레벨이 로드되어 유효한 상태라면, **Interface Message** 는 레벨의 블루프린트 스크립트를 타겟으로 해서 함수를 호출합니다.

![](InterfaceGetLevelStreaming.png)

### 인터페이스 함수 덮어쓰기

인터페이스 함수의 가장 중요한 면 중 하나는, 직접적인 구현부가 없기에, 인터페이스를 구현하는 각 블루프린트에 대해 그 함수성을 독립적으로 구현할 수 있다는 것입니다.

블루프린트에서 인터페이스를 구현한 이후에는, 그 인터페이스의 함수가 **내 블루프린트** 패널에 보일 것입니다.

![](iFunctionInExplorer.png)

그 함수를 더블클릭하면 블루프린트 에디터에 열립니다. 여기에는 이 함수에 대한 로컬 구현이 표시되며, 구현되는 함수성은 뭐가 됐든 이 블루프린트 고유의 것이 됩니다. 이런 식으로, 인터페이스를 구현하는 각 블루프린트마다 커스텀 함수성을 정의할 수 있습니다.

예를 들어 이 그림에는 기본적인 인터페이스 함수가 블루프린트 안에 열린 것으로 보입니다. 현재 이 함수는 아무것도 하지 않습니다.

![](DefaultFunction.png)(w:600)

다음과 같이 수치 비교를 한 뒤 값을 출력하는 간단한 망을 만들어 볼 수 있습니다.

![](ComparisonFunction.png)(w:600)

이제 이 함수가 로컬에서 호출되면, 플로트 값을 받아, 숫자 10 과 비교한 다음, 화면에 불리언 값을 출력합니다.

![](FunctionLogging.png)