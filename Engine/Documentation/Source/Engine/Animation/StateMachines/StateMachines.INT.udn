Availability:Public
Title: State Machines
Crumbs: %ROOT%, Engine, Engine/Animation
Description:State Machines allow Skeletal Animations to be broken up into various states, with full control over how blends occur from one state to another.
version: 4.9

<!--
[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Animation/StateMachines:title%](Rigging_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/content_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Animation/StateMachines:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Animation/StateMachines:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Animation/StateMachines]
	[/PARAM]
[/OBJECT]
[/VAR]
-->

[TOC (start:2)]

[EXCERPT:Intro]
**State Machines** provide a graphical way to break the animation of a Skeletal Mesh into a series of States. These states are then governed by Transition Rules that control how to blend from one state to another. As a tool, they greatly simplify the design process for Skeletal Mesh animation, in that you can create a graph that easily controls how your characters can flow between types of animation without having to create a complex Blueprint network.

They also simplify conceptualization of your animation graph. You can start the design of your animation by thinking of the necessary states you will need and how a character may flow from one state to another. A great way to think of them is as a way to break all possible animations for your character into an easy-to-read flow chart, in which you can watch the Skeletal Mesh's state move throughout the chart.

For example, a character may have a state of "Idle" when not moving. Once the character's speed exceeds a certain value, the character may blend into another state of "Movement." There may be any number of other states, such as Falling, Jumping, Crouching, Sprinting, and so forth. By using State Machines, animators and artists can quickly visualize how data is flowing through their animation network.
[/EXCERPT:Intro]


[REGION:topics half]
[OBJECT:Topic]
	[PARAM:image]
		![](StateMachineCreate.png)
	[/PARAM]
	[PARAM:title]
		%Engine/Animation/StateMachines\CreatingStateMachines:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Animation/StateMachines\CreatingStateMachines:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Animation/StateMachines\CreatingStateMachines]
	[/PARAM]
[/OBJECT]
	
[OBJECT:Topic]
	[PARAM:image]
		![](EditingStateMachines.png)
	[/PARAM]
	[PARAM:title]
		%Engine/Animation/StateMachines\EditingStateMachines:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Animation/StateMachines\EditingStateMachines:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Animation/StateMachines\EditingStateMachines]
	[/PARAM]
[/OBJECT]

[/REGION]

## How State Machines Work

Animation State Machines allow you to think of your animation Blueprint in a more modular sense than you would without it. Users simply define a series of various states in which the character or Skeletal Mesh could possibly exist. Next, they define the circumstances by which the character or mesh may enter and exit each state. This is very similar to a flow chart. For instance, you may have a flow chart that defines the process of your character's animation, and it may look something like this:


![](AnimationFlowChart.png)(w:500)

If you were to set up a State Machine for the above flow, it would end up looking like this:

![](StateMachine.png)


## Anatomy of a State Machine

State Machines are comprised primarily of a network of states and the rules that define transitions into and out of them. Each state, along with each rule set, is its own condensed Blueprint network. This makes it very easy to handle complex animation blending without having to use a diabolically complicated AnimGraph. Here are the key parts of a State Machine:

### States


Conceptually, it is best to think of a state as just an organized portion of an AnimGraph that we know the character or Skeletal Mesh will be blending into and out of on a regular basis. You can then transition into and out of this part of the graph. For instance, you may have an Idle state for your character's animation, and that state may just contain a single animation. 

Here is such an Idle state seen from the State Machine.

![](State.png)

When **Double-clicked**, here is the simple graph found within that Idle state.

![](IdleStateInside.png)

Once the character started, moving, however, they could transition into a Movement state - which could define moving laterally across a surface, like walking or running.

![](MoveState.png)

Within, this state may contain a [BlendSpace](Engine/Animation/Blendspaces) that is being defined by the character's speed and direction of movement.

![](MovementInside.png)

States have no pins in and of themselves, because they are intended to have a more freeform layout. To connect a state to any other state, simply drag a wire from its outer border. This can also be used to create new states, just like making new nodes in a Blueprint.

![](DragWire.png)



### Transition Rules

Once you have your states defined, you need to be able to control how your Skeletal Mesh is going to transition from one state to another. This is where Transition Rules come into play. Transition rules are created automatically along the wires that connect states.

![](TransitionRule.png)

Transition rules can perform any number of checks and tests against variable values, all with the purpose of outputting a True/False value. This Boolean output determines whether the animation can move through the transition or not. 

![](TransitionRuleInside.png)

In this example, we are testing the value of a character's Speed. Once it reaches a value greater than 10, we enable the transition. In this case, the character is allowed to move from an Idle state to a Movement state. We can then use a completely separate rule to transition back to Idle. For example, here we have a transition rule moving back from Movement to Idle.

![](TransitionRuleReturn.png)

Inside, this simply checks to see if the same value we used to transition into the Movement state is no longer true. 

[REGION:fullwidth]
![](TransitionRuleReturnInside.png)
[/REGION]



### Conduits

Conduits serve as a more advanced and sharable transition resource. Where a Transition Rule is going to be a simple 1-to-1 relationship form one state to another, a Conduit can have 1-to-many, many-to-1, or many-to-many. 

![](ConduitNode.png)

For instance, you may have a situation where you have multiple animations that could play when a character is killed. You could start with a simple Transition Rule that says when the health of that character is less than or equal to 0, then go to a Death state. However, if instead of a State, the transition went into a Conduit, you could perform a series of checks to see how the player was killed (shot, stabbed, explosion, hit by a car, anvil on the head, etc.) and branch from there into various independent death States. 

Such a graph - although a bit simplified - may look something like this:

![](ConduitGraph.png)(w:800)

Inside, a Conduit graph looks just like a Transition Rule:

![](ConduitInside.png)

The actual transition rules that exit the Conduit can then determine the type of death and allow blending to the appropriate state.

## Mouse-Over Previewing

One of the features of a State Machine is its ability to provide previews on mouse-over for the State Machine itself, as well as for its component nodes. For example, if you hover your mouse over a State Machine, a preview window will pop up giving you a high-level view of the State Machine. This is similar to a collapsed Blueprint network.

![](StateMachineHoverPreview.png)

These previews also extend to the various States and Transition Rules within a State Machine. Hovering over them will show you a preview of what is inside.

![](IdleStatePreview.png)

In the case of Transition Rules, you will see not only a preview of the nodes, but also a breakdown of the rule in words.

![](TransitionRulePreview.png)

