INTSourceChangelist:2594570
Availability:Public
Title:ポストプロセス マテリアル
Crumbs: %ROOT%, Engine, Engine/Rendering/PostProcessEffects
Description:マテリアル エディタでカスタム ポストプロセスを作成しブレンドする方法

![](Teaser3.png)
![](Teaser0.png)
![](Teaser1.png)
![](Teaser2.png)


## ポストプロセスのグラフ

[EXCERPT:PostProcessMaterials_Desc]
アンリアル エンジンにはポストプロセス ノードのグラフに基づいた複雑なポストプロセスがあります。**ポストプロセス マテリアル** は
特定の位置に追加で挿入することができます。全グラフのダンプされた内容を確認するには [以下のFAQ に掲載した](#FAQ) **r.CompositionGraphDebug** を参照してください。
グラフはポストプロセス処理のみではなく、ライティングの一部も処理しています。今後、マテリアルエディタからさらに多くを
カスタマイズできるようにする予定です。
[/EXCERPT:PostProcessMaterials_Desc]

ほとんどの場合、グラフは中間レンダリング ターゲットを自動作成します。つまりその前の色とブレンドしたい場合、
 (PostProcessInput0 からの入力を使って) シェーダーでブレンドする必要があります。

[EXCERPT:PostMatWarning]
[REGION:warning]
ポストプロセス マテリアルは、慎重に本当に必要な場合に限り使用してください。カラーの補正や調整、ブルーム、被写界深度や他の様々なエフェクトなどは可能な限り、Post Process ボリューム固有の設定を使用するようにしてください。この設定は最適化済であり、より効率的です。 
[/REGION]
[/EXCERPT:PostMatWarning]

## ポストプロセス マテリアルの使用

ポストプロセス設定 (通常はポストプロセスボリュームまたはカメラ設定で定義) でいわゆるブレンド可能なアセットをブレンドすることができます。
現時点では、**マテリアル** と **マテリアル インスタンス** のみがブレンド可能なアセットです。アンリアル エンジンにはいくつかのポストプロセス マテリアルがありますが、
プログラマーの支援なしに独自の **カスタム仕様のポストプロセス** を作成することができます。

1 つ以上のポストプロセス マテリアルを、 **[Misc]** セクションの **Blendables** へポストプロセス ボリュームとして割り当てます。まず「＋」キーを押して新スロットを追加し、
**コンテンツ ブラウザ** でマテリアルを選択して左矢印キーで割り当てます。ここで順序は重要ではなく、未使用のスロットは単に無視されます。

![](PostProcessSettings.gif)

## 簡単なポストプロセス マテリアルの作成

ゼロからポストプロセス マテリアルのエフェクトを作成する概要については、[](Engine/Rendering/PostProcessEffects/PostProcessMaterials/PostProcessDemoMaterialOverview) をご覧ください。

![](Engine/Rendering/PostProcessEffects/PostProcessMaterials/PostProcessDemoMaterialOverview/FinalPostEffect.png)(w:640)

##ポストプロセス マテリアルの重要な設定

ポストプロセス マテリアルではマテリアル ドメインで **[post process (ポストプロセス)]** を指定する必要があります。

![](DomainPostProcess.png)

このマテリアルでは新しい色の出力に *EmissiveColor (エミッシブ (発光色))* のみを使用するようにします。さらに、ポストプロセス処理中のどこで、このパスを適用するかを定義することが可能であり、
複数の場合は処理順序 (優先順位) を定義することができます。

![](PostProcessMaterialProps.png)

| ブレンド可能な位置| 説明 |
| -------- | ----------- |
| **Before Tonemapping (トーンマッピングの前)** | PostProcessInput0 は、HDR (ハイダイナミック レンジ) で最大限のライティングでシーンの色を提供します。 これを使用して Temporal AA や GBuffer ルックアップ (例、深度や法線) の問題を修正します。|
| **After Tonemapping** | 色が LDR (ローダイナミック レンジ) 時の好ましい位置で、より低い精度と少ない帯域幅を必要とします。これはトーンマッピングとカラーグレーディングの後です。|
| **Before Translucency** | これはパイプライン内で 'Before Tonemapping' よりさらに早い、透過がシーンカラーと組み合わさる前になります。SeparateTranslucency (別々の透過) が、法線透過より後に合成されることに注意してください。 |
| **Replacing the Tonemapper** | PostProcessInput0 は HDR シーンカラー、PostProcessInput1 は SeparateTranslucency (アルファはマスクです) を提供し、 PostprocessInput2 には解像度の低いブルーム入力が付いています。 |

通常のポストプロセスの入力は、前のパスから入ってきます。**PostProcessInput0** を使用する場合、 SceneTexture マテリアル式からこの色にアクセスできます。SceneColor を使用した場合、適切な結果が得られないことがあります。

## 異なるマテリアル インスタンスのブレンド

ポストプロセス ボリュームでは、複数のポストプロセス マテリアル間で滑らかな遷移を簡単に設定することができます。ここでは Unbound にマークが付けられたひとつのボリュームと、より大きなブレンド半径 (例、 1000) を持つひとつのボリュームを使用しています 。

![](BlendingAVolume.png)

各ボリュームで同一マテリアルの異なるマテリアル インスタンスを指定します。色はこの 2 つのマテリアル インスタンスに対して違う設定ができるマテリアル パラメータとして指定されます。

カメラ位置に応じてひとつのボリュームの設定が使用されます。

[REGION:imagetable]
| ![](VignetteG.png) | ![](VignetteR.png) |
| ------ | ------ |
| 緑のビネット マテリアル インスタンス | 赤のビネット マテリアル インスタンス |
[/REGION]


カメラの移動で、2 つのエフェクト設定の間にスムーズな線形推移を認識することができます。

以下の図は、2 つのボリュームを持つレベルがどのようになるかを上から見たものです。大きなボリュームは赤のマテリアル インスタンスを、小さなボリュームは緑のマテリアル インスタンスを持ち、ブレンド可能になっています。
小さい方のボリュームの方が優先度が高くなっています。マテリアルのパラメータはカメラ位置に応じてブレンドされます。
ぼやけたボーダーはボリュームによって指定される BlendRadius プロパティで定義され、ボリュームの形状を拡げます。

正しくセットアップすると、すべてのブレンドは期待通りに行われます。

[REGION:imagetable]
| ![](VolumeBlendBad.png) | ![](VolumeBlendGood.png) |
| ------ | ------ |
| 悪いセットアップ例 | 良いセットアップ例 |
[/REGION]

この 2 つのセットアップは、マテリアル (スカラーまたはベクター) のパラメータで指定するデフォルト値のセットアップに違いがあります。
良いセットアップでは、パスがエフェクトを持たない値になっています (例、ホワイトで乗算または 0 で線形補間)。

**この 2 つのセットアップで以下がわかります。** カメラがいずれかのボリュームの影響範囲外にあるとポストプロセスのパスはレンダリングされません (グレイのグリッドで視覚化)。
いずれかのボリュームの影響範囲内にあると、正しいブレンドが表示されます。

**悪いセットアップの場合 :** カメラが影響がある半径に入ると、ぎこちない遷移が見えますが、デフォルト パラメータを誤って指定したからです。

**良いセットアップの場合 :** カメラが影響がある半径に入ってくる遷移はうまく隠されていてボリュームの色が滑らかに遷移するのがわかります。

[REGION:note]
すべてのマテリアル インスタンスのプロパティは、プロパティのチェックボックスのチェック状況に関係なくブレンドされます
(チェックが入っていなければ、親からのプロパティをブレンドします)。これはチェックされていないプロパティは何のエフェクトももたらさないポストプロセス設定とは異なります。
つまり、マテリアル インスタンスをブレンドすると、全てのプロパティがブレンドされます。
[/REGION]

## "SceneTexture" マテリアル式

**SceneTexture** マテリアル式をマテリアルに追加して、式プロパティで参照するテクスチャを選択します。

![](SceneTextureProps.png)

以下のようにノードには任意の入力値と複数の出力値があります。 

![](SceneTextureExpression.png)

**UV** 入力値で、テクスチャ ルックアップを行う位置を指定することができます (Color 出力値のみに使用)。
Color 出力値は 4 チャンネル出力 (実際のチャンネル割り当てはシーン テクスチャIDに依存します) です。**Size** は、テクスチャの幅と高さを持つ
2 コンポーネントのベクターです。この逆数 (1/幅、1/高さ) は、**InvSize** 出力値で有効です。以下の例のように、
隣接するサンプルの参照に便利です。

![](DepthNextTo.png)

このマテリアル式は、現ピクセルと隣接するピクセルとの深度の違いを計算します (例、In = 0,1 で、下のピクセルへデルタ値を返します)。

## GBuffer プロパティの使用

GBuffer は、マテリアルを格納する複数のテクスチャ (例、サブサーフェス/スペキュラカラー、ラフネスなど) や、ライティングなしのオブジェクト属性 (例えば法線、深度) で構成され、
シェーディングを計算 (ライトがマテリアルとどのように相互作用するか) します。ディファード レンダラーでは、最初に GBuffer をレンダリングしてから GBuffer 属性と一緒に
すべてのライティング (ディファード) を計算します。UE4 がディファード シェーディング パスを使用する場合 (例、DirectX 11またはハイエンドの OpenGL)、ポスト プロセス処理中にこれらのバッファへアクセスすることができます。

一般的にアンチエイリアス処理はこれを少々難しくします。GBuffer ピクセル/テクセルは出力ピクセルと 1：1 で関連付けられなくなったためです (以下のセクション参照)。

## CustomDepth

この機能は、オブジェクトを別の深度バッファ (カスタム深度バッファと呼ばれます) でレンダリングすることによって、そのオブジェクトをマスクすることができます。
余分なドローコールが増えますが、マテリアルは追加しません。深度のみを出力するため、レンダリングは比較的低負荷です。この機能はメッシュで有効にすることができます
 (例、スタティックメッシュのプロパティ / レンダリングのカスタム深度)。

![](CustomDepth.png)

以下のシーンでは 2 つのオブジェクトでこの機能を有効にしていますが、コンテンツを視覚化するポストプロセス処理のパスはなく、以下のようにこの機能は不可視のままとなります。

![](scene.png)

以下は CustomDepth を視覚化したものになります。

![](sceneCustomDepth.png)

視覚化のために使用したマテリアルです。

![](CustomDepthMat.png)

## Temporal AA または GBuffer でなぜジッターが生じるか

Temporal AA は UE4 の特殊な機能で、わずかなパフォーマンス負荷で画像品質を大幅に向上させます。

デフォルト設定で、ポストプロセス マテリアルはポストプロセス グラフの最後に挿入されます (トーンマッパーの後)。つまり、トーンマッピング、カラー グレーディング、そして Temporal AA が適用された後に
最終的な LDR カラーを取得します。パフォーマンスや使いやすさの観点から、多くの簡易なポストプロセス エフェクトにとって最高の場所です。

以下は特定のオブジェクト周りのシルエットを可視化させるためにカスタムの深度入力値をどのように使用したかの例です。

![](sceneAfterTonemapper.png)

この前の画像ではシルエットにアンチエイリアス処理が見受けられませんが、動作中はシルエットに 1 ピクセル程度のジッターがある (小刻みに揺らしている) のが分かります。
これは、Temporal AA では、シーン全体のレンダリングを各フレームでサブ ピクセル単位で動かすためです。アンチエイリアス処理がされた最終画像を作成するために、複数のフレームが一緒に結合されます。
この問題を解決するために、ポストプロセス グラフで前の場所へマテリアルを移動することもできます。

以下がその結果となります。

![](sceneBeforeTonemapper.png)

安定したアンチエイリアス処理が施された画像となります。動作中は Temporal AA でいくつかのアーティファクトに気づくかもしれません。この機能は古い画像を置換するために深度バッファを使用しています。オブジェクトの内側でボーダーがレンダリングされた状態で問題なく機能しますが、
オブジェクトの外側では深度バッファを調整する必要があります (パフォーマンスの負荷が余分にかかるためまだ行っていません)。TemporalAA は現在開発途中です。ここでは輪郭が太めに表示されていますが、
これは理想的ではありません。 

## UV と ScreenPos

画面にあわせたバッファでポストプロセス マテリアルをルックアップすることができますが、正しい UV が必要になります。 
**ScreenPosition** マテリアル式が期待する UV (ビューポートの左上が 0,0 で、右下が 1,1) を出力します。
**texture coordinate (テクスチャ座標)** マテリアル式を使うと、結果は異なります。これは、実際のテクスチャ (厳密にはレンダー ターゲット) は、ビューポートよりも大きくなる可能性があるためです。
このテクスチャを複数のビューポートで共有し、最も大きいものがすべてのビューポートで使用されるため、エディタの中では大きくなってしまう可能性があります。
ゲーム内でさえ、大きくなってしまうことがあります (例、SceneCapture アクタは小さいビューポート、Matienee black borders、 Splitscreen、 VR など)。
texture coorinate マテリアル式を使うと、大きめのテクスチャ用にUV が提供されます。相対オフセット (ピクセルサイズのエッジ探知など) だけが必要な場合は、正しいサイズでスケールする必要があります。
**SceneTexture** マテリアル式には、サイズの出力とサイズの反転があります (ピクセル オフセットに効果的かつ便利です)。
ビューポート UV を取得したい場合 (例、テクスチャをビューポートにマッピング) は、 **ScreenPosition** マテリアル式を使ったり、必要な演算を手書きのコードで行う (より制御されますが遅くなることがあります) ことができます。
これを行うためには、 **ViewSize** マテリアル式が必要になります。全てをテストするには、様々なビューポート コンフィギュレーションをテストすることができるコンソール変数 **r.ViewPortTest** を使います。

## フィルター済みテクスチャ ルックアップ

SceneTexture マテリアル式には、 [bilinear (バイリニア)] でフィルタ処理したルックアップを取得するためのチェックボックスがあります。このオプションを使うと、レンダリング速度が落ちるので、必要な場合のみ使用してください。
スクリーン空間テクスチャの多くはフィルタをサポートしていません (GBuffer など)。このプロパティをエクスポーズしないことで、エンジンが必要に応じてデータを圧縮できるようになります (パッキングがフィルタリングを妨ぎます)。

## トーンマッパを置き換える

[Replacing the Tonemapper] のブレンド可能な位置を使用することで、エンジン内のトーンマッパを独自のトーンマッパでオーバーライドすることができます。開発中の機能なので今後変更される場合があります。また、機能はまだ完全に実装されていません。

![](ReplacingTheTonemapper.png)

ポストプロセス設定パラメータをトーンマッパにエクスポーズし始めていますが、大幅な変更が予想されます。
値はマテリアル パラメータとして公開され、正確な名前が必要になります。 

ベクター パラメータ：
	Engine.FilmWhitePoint
スカラー パラメータ
	Engine.FilmSaturation
	Engine.FilmContrast

[EXCERPT:PostMatWarning]
[REGION:warning]
パラメータを取得するには、ポストプロセス マテリアルからマテリアル インスタンスを作成する必要があります！
[/REGION]
[/EXCERPT:PostMatWarning]

独自のパラメータを使って、他のポストプロセス マテリアルのようにブレンドすることも可能です。

## 既知の問題
以下は今後修正すべき問題です。

  * **マテリアル式 SceneTexture**
    * SeparateTranslucency (個別の透過) が機能しない。
    * 一部のルックアップが特定のパスで機能しない (例えば、パフォーマンスの負荷が高すぎるものは修正しない可能性もあります)。
    * MaterialFunction がエラーを報告しても PostProcess ドメインでマテリアルに使用される点
  * **マテリアル**
    * PostProcessMaterial の UV が 0 から 1 の範囲ではない点 (例えばエディタでビューポートサイズを縮小時)。ルックアップと調整は取れるもののビネット エフェクトのようなものは実装が難しくなります。
    * ポストプロセス マテリアルのアセット サムネイルの見た目が正確ではない。
    * アルファ値の出力がいまだサポートされていない (オパシティを通過しなくてはいけない)
    * マテリアル エディタのプレビュー マテリアルの見た目が正確ではない。
    * マテリアルの変化がポストプロセス処理の変化につながらない。回避策としてエディタを再起動します。
	* **コンテンツ ブラウザ** でポストプロセス マテリアルのフィルタリングを簡単にできるようにする。
  * **ブレンド**
    * ブレンド半径で 2 つのポストプロセス ボリュームをブレンド時の移行が滑らかではない。デフォルト値を表すマテリアル インスタンスを設定した unbound ボリュームを使用してこれを防ぐことができます。


## FAQ
  * **入力値に "Lighting only mode (ライティングのみのモード)" のテクスチャを使用できますか？**

    できません。中間段階でこのデータは有効ではありません。このビューモードではマテリアルカラーを無視してこれを
	生成しています。高速オプションにするには大部分のレンダリング コードの再構築が必要です。

  * **SceneColor のルックアップで表示されるバンディングは PostProcessInput0 の使用時に何故見えないのでしょうか？**

    SceneColor 使用時は、現在書き込んでいるテクスチャへのルックアップが可能となるように質を低下させたシーンのコピーを作成します
	 (一般的にはこの処理が不可能なメッシュへレンダリングしています)。
	ポストプロセス処理では PostProcessInput0 を使用します。

  * **ポストプロセス処理に必要なメモリ使用量はどの位ですか？**

    メモリーの負荷はスクリーンの解像度次第です。トーンマッピング処理の前に HDR (ピクセルあたり 8 バイト)、その後 LDR (ピクセルあたり 4 バイト) を使用します。

  * **ポストプロセスのレンダリング負荷を低くするには、どうしたらよいですか ?**

    ターゲット プラットフォームで評価し、テクスチャ ルックアップ数を低めに維持、数学演算を少なくし、依存するテクスチャルックアップの削減、
	ランダム化したテクスチャルックアップの回避を行います (テクスチャのキャッシュ ミスが原因で遅くなることがあります)。

  * **パスはいくつ使用できますか？**

    パスの使用ひとつひとつがパフォーマンス負荷に加算されます。パスを結合し、パスのアクティベートは必要時のみにとどめてください。一般的なゲーム機能、
	例えばノイズを、パフォーマンスを高めるためにエンジンパスへ追加することが可能です。

  * **ポストプロセス処理およびブレンドにかかる CPU のパフォーマンス負荷はどのくらいですか？**

    マテリアルのブレンドの負荷は非常に低いものです。すべてのマテリアル インスタンスのプロパティは、ブレンドされ、こうした設定を持つひとつのポストプロセス マテリアルのパスだけがレンダリングされます。

  * **正確な TemporalAA を得るために "Before Tonemapper" を使用する必要があるのです。カラーを使用するとトーンマッピングされてしまい、違った見た目となってしまいます。どうやってこの問題を回避できますか？**
    
	この問題に対する簡単な解決法はありません。逆トーンマッピング演算 (高負荷) をする必要があります。目の順応によっては、
	さらに異なった色で表示されるかもしれません。EyeAdaptation レベルを SceneTextures へエクスポーズしてこれを補正します。

  * **どうやってポストプロセス グラフの全ダンプ内容を取得できますか？**

	**r.CompositionGraphDebug** でグラフのログをコンソールへ記録することができます。以下はその例です。

		FRenderingCompositePassContext:Debug 'PostProcessing' ---------
		Node#1 'SceneColor'
			ePId_Output0 (2D 1136x768 PF_FloatRGBA RT) SceneColor Dep:2
		Node#4 'Velocity'
			ePId_Output0 (2D 1136x768 PF_G16R16 RT) Velocity Dep:1
		Node#2 'SceneDepthZ'
			ePId_Output0 (2D 1136x768 PF_DepthStencil) SceneDepthZ Dep:1
		Node#5 'MotionBlurSetup0MotionBlurSetup1'
			ePId_Input0:Node#4 @ ePId_Output0 'Velocity'
			ePId_Input1:Node#1 @ ePId_Output0 'SceneColor'
			ePId_Input2:Node#2 @ ePId_Output0 'SceneDepthZ'
			ePId_Output0 (2D 568x384 PF_FloatRGBA RT) MotionBlurSetup0 Dep:2
			ePId_Output1 (2D 568x384 PF_FloatRGBA RT) MotionBlurSetup1 Dep:1
		Node#6 'QuarterResVelocity'
			ePId_Input0:Node#5 @ ePId_Output0 'MotionBlurSetup0MotionBlurSetup1'
			ePId_Input1:
			ePId_Output0 (2D 284x192 PF_FloatRGBA RT) QuarterResVelocity Dep:1
		Node#7 'VelocityBlurX'
			ePId_Input0:Node#6 @ ePId_Output0 'QuarterResVelocity'
			ePId_Input1:
			ePId_Output0 (2D 284x192 PF_FloatRGBA RT) VelocityBlurX Dep:1
		...


