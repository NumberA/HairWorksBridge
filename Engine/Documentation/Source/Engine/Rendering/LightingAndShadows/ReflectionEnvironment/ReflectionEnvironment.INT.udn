Availability:Public
Title: Reflection Environment
Crumbs: %ROOT%, Engine, Engine/Rendering/LightingAndShadows
Description:System for capturing and displaying local glossy reflections.
Version: 4.9

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Rendering/LightingAndShadows/ReflectionEnvironment:title%](%ROOT%/Engine/Rendering/LightingAndShadows/ReflectionEnvironment/reflection_topic.png)
	[/PARAM]
	[PARAM:icon]
	![](%ROOT%/ue4_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
	%Engine/Rendering/LightingAndShadows/ReflectionEnvironment:title%
	[/PARAM]
	[PARAM:description]
	%Engine/Rendering/LightingAndShadows/ReflectionEnvironment:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/LightingAndShadows/ReflectionEnvironment]
	[/PARAM]
[/OBJECT]
[/VAR]
[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Rendering/LightingAndShadows/ReflectionEnvironment:title%](%ROOT%/Engine/Rendering/LightingAndShadows/ReflectionEnvironment/reflection_topic.png)
	[/PARAM]
	[PARAM:icon]
	![](%ROOT%/ue4_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
	%Engine/Rendering/LightingAndShadows/ReflectionEnvironment:title%
	[/PARAM]
	[PARAM:description]
	%Engine/Rendering/LightingAndShadows/ReflectionEnvironment:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Rendering/LightingAndShadows/ReflectionEnvironment]
	[/PARAM]
[/OBJECT]
[/VAR]

[EXCERPT:ReflectionEnv001]
The **Reflection Environment** feature provides efficient glossy reflections in every area of the scene. Many 
important materials like metals rely on having reflections in all directions, which the Reflection Environment 
provides. It is targeted toward consoles and mid spec PC, so it must run very fast.  It does not provide reflections 
of dynamic objects or sharp reflections, those will need to be achieved by complementing the Reflection Environment 
with other reflection techniques, such as Screen Space Reflections.
[/EXCERPT:ReflectionEnv001]

[REGION:fullwidth]
![Reflection Environment](reflection_environment.png)
[/REGION]

## Quick Setup

To use the Reflection Environment, first setup lighting and build lighting once.  **There must be some indirect 
diffuse lighting for the Reflection Environment to show up at all.**  Next, drag *_SphereReflectionCapture_* Actors 
from the _Visual_ tab of the _Place Mode_ of the **Modes** panel into your level and make sure your materials have noticeable specular, and a low roughness.  
Use the Reflection Override view mode to visualize what is being captured.

## Glossy Indirect Specular

In technical terms, the Reflection Environment provides indirect specular. We get direct specular through 
analytical lights, but that only provides reflections in a few bright directions. We also get specular from 
the sky through a Sky Light, but that does not provide local reflections, since the Sky Light cubemap is infinitely far away. Indirect specular allows all parts of the scene to reflect on all other parts, which 
is especially important for materials like metal which have no diffuse response.

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Diffuse Only](DiffuseOnly.png)(w:700)
	[/PARAM]
	[PARAM:after]
	![Reflection Only](ReflectionOnly.png)(w:700)
	[/PARAM]
[/OBJECT]


**Full lighting**

[REGION:fullwidth]
![Full Scene](Complete.png)
[/REGION]

[EXCERPT:RefEnvIntro]
The Reflection Environment works by capturing the static scene at many points and reprojecting it onto 
simple shapes like spheres in reflections. Artists choose the capture points by placing **_ReflectionCapture_** 
Actors. Reflections update in real time during editing to aid in placement but are static at runtime. 
Projecting the captured scene onto simple shapes gives approximate parallax for the reflection. Each pixel 
blends between multiple cubemaps to get the final result.  Smaller ReflectionCapture Actors override larger ones, so you can refine reflection parallax accuracy in areas as needed.  For 
example, you might place a capture at the center of a room and then refine the reflection by placing smaller 
captures at the corners of the room. 
[/EXCERPT:RefEnvIntro]

Materials with varying glossiness are supported by generating blurry mip maps from the captured cubemaps.
  
![Varying Glossiness](VaryingGlossiness.png)

However, just using the cubemap reflections on a very rough surface results in an overly bright reflection 
that has significant leaking due to lack of local occlusion. This is solved by reusing the lightmap data 
generated by Lightmass. The cubemap reflection is mixed together with the lightmap indirect specular based 
on how rough the material is. A very rough material (fully diffuse) will converge on the lightmap result. 
This mixing is essentially combining the high detail part of one set of lighting data (cubemaps) with the low 
frequency part of another set of lighting data (lightmaps). For this to work correctly though, only indirect 
lighting can be in the lightmap. This means that only the indirect lighting from Stationary lights can improve 
the quality of reflections on rough surfaces. **Static light types should not be used together with the 
Reflection Environment as they will put direct lighting in the lightmap.**  Note that this mixing with the lightmap 
also means that the map must have meaningful indirect diffuse lighting, and that lighting must already be built 
to see results.

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Reflections on a rough surface with no shadowing](2RoughWithNoShadowing.png)(w:550)
	[/PARAM]
	[PARAM:after]
	![Rough with Shadowing](2RoughWithShadowing.png)(w:550)
	[/PARAM]
[/OBJECT]

]

## Reflection capture shapes

[EXCERPT:RefCaptures]
There are currently two reflection capture shapes: sphere and box. The shape is very important because it 
controls what part of the scene is captured into the cubemap, what shape the scene is reprojected onto in 
reflections, and which part of the scene can receive reflections from that cubemap (area of influence).
[/EXCERPT:RefCaptures]

### Sphere shape

The sphere shape is currently the most useful. It never matches the shape of the geometry being reflected, 
but has no discontinuities or corners therefore the error is uniform. 

![Sphere Shape](SphereShape.png)(w:720)

The sphere shape has a orange influence radius that controls which pixels can be affected by that cubemap, and the sphere that the scene 
will be reprojected on to. 

Smaller captures will override larger ones, so you can provide refinement by placing smaller captures around the scene.

### Box shape

The box shape is very limited in usefulness and generally only works for hallways or rectangular rooms. The 
reason is that only pixels inside the box can see the reflection, and at the same time all geometry inside the 
box is projected onto the box shape, creating significant artifacts in many cases.

![Box Shape](BoxShape.png)

The box has an orange preview for the projection shape when selected. It only captures the scene within 
**Box Transition Distance** outside this box. The influence of this capture fades in over the transition 
distance as well, inside the box. 

## Editing

It is important to note that reflection captures are not automatically kept up to date. Only loading a map, 
directly editing a capture or building lighting will update the reflection captures. If you make another 
edit like change a light's brightness or move scene geometry, you need to select a capture and click 
'Update Captures' to propagate the change. 

### Visualizing

The Reflection Override viewmode has been added to make it easier to see how well the reflections are set up. 
This viewmode overrides all normals to be the smooth vertex normal, and makes all surfaces fully specular and 
completely smooth (mirror like). Limitations and artifacts of the Reflection Environment are also clearly 
visible in this mode so it is important to switch to Lit periodically to see what the reflections look like in 
normal conditions (bumpy normals, varying glossiness, dim specular).

![Reflection Override](ReflectionOverride.png)

Some new show flags have been added which are useful for isolating down the components of the lighting:

| Flag | Description |
| ---- | ----------- |
| **Lighting Components > Diffuse** | Disabling diffuse will hide diffuse contribution from all lighting methods. |
| **Lighting Components > Specular** | Disabling specular will hide specular contribution from all reflection methods. |
| **Lighting Features > ReflectionEnvironment** | This will disable the Reflection Environment feature, but other reflection features will still be active (SSR, analytical specular). |


## Setting up a level to use the Reflection Environment

1. The first step toward having good reflections is setting up diffuse lighting, including indirect lighting 
through lightmaps. The Lightmass page contains more info. Common errors preventing Lightmass indirect lighting 
from working after a build include a shadow casting skybox, lack of a **_LightmassImportanceVolume_**, missing 
or incorrectly setup lightmap UVs, or **Force No Precomputed Lighting** being set in the **World Properties**.

	The scene's diffuse is what will be reflected through the Reflection Environment. For best 
	results, ensure significant contrast between directly lit and shadowed areas. The bright 
	diffuse lit areas are what will show up clearly in reflections, and the darker shadowed areas 
	are where the reflections will be most visible. Use the Lit viewmode together with the Specular 
	show flag disabled to see the scene as the reflection captures see it.

1. It is extremely important to setup your scene's materials to work well with the Reflection Environment. 
A flat, mirror surface will reveal the inaccuracies of combining cubemaps projected onto simple shapes. 
However, curvy geometry or rough surfaces can both obscure these artifacts and provide convincing results. 
So it is important to use detail normal maps and specify some degree of roughness on materials that will be 
used in flat areas.

	[REGION:imagetable]
	| ![Curvy and Sharp](1CurvyAndSharp.png)(w:290) | ![Flat and Rough](1FlatAndRough.png)(w:290) | ![Flat and Sharp](1FlatAndSharp.png)(w:290) |
	| ------ | ------ | ------ |
	| Smooth surface but curvy geometry: Good quality reflections | Rough surface but flat geometry: Good quality reflections |Smooth surface AND flat geometry: Evident that reflections do not match up
	[/REGION]

1. Place reflection captures in the areas that you want to have reflections. Try to place the sphere captures 
such that the part of the level you want to reflect is contained just inside their radius, since the scene will 
be reprojected onto that sphere shape. Try to avoid placing captures too close to any scene geometry, as that 
nearby geometry will dominate and block important details behind it.

## Performance considerations

The Reflection Environment cost is only dependent on how many captures influence the pixels on the screen. 
It is very similar to deferred lighting in this sense. Reflection captures are bounded by their influence 
radius and therefore they are culled very efficiently. Glossiness is implemented through the cubemap mip maps 
so there is little performance difference between sharp or rough reflections.

## Limitations

* Reflections through this method are approximate. Specifically, the reflection of an object will rarely match 
up with the actual object in the scene due to projection onto simple shapes. This tends to create multiple 
versions of that object in reflections as many cubemaps are being blended together. Flat, smooth surfaces 
that cause mirror reflections will show the error very noticeably. Use detail normal maps and roughness to 
break up the reflection.
* Capturing the scene into cubemaps is a slow process which must be done outside of the game session. This 
means dynamic objects cannot be reflected, although they can receive reflections from the static scene.
* Only the scene's diffuse is captured to reduce error. Purely specular surfaces (metals) will have their specular applied as if it were diffuse during the capture.
* There can be significant leaking when there are different lighting conditions on both sides of a wall. 
One side can be setup to have correct reflections, but it will always leak into the other side. 
* Due to DX11 hardware limitations, the cubemaps used to capture the scene are all 128 on each side, and 
the world can have at most 341 reflection captures enabled at one time.

