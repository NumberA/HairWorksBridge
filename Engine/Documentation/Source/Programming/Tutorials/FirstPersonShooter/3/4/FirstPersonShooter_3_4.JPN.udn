INTSourceChangelist:2672916
Availability:Docs
Title:3.4 - 発射物をワールドと相互作用させる
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description:First Person Shooter プロジェクトで発射物をワールドと相互作用させる方法を学びます。
SkillLevel:初心者向け
Version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/3/3)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/3/5)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

発射物 (プロジェクタイル) のコリジョンの相互作用を検知できるようになったので、コリジョンの反応方法を決めることができます。このステップでは、`OnHit` 関数を collision event に反応する `FPSProjectile` に追加します。

## 発射物をコリジョンに反応させる

1.	**[Solution Explorer]** で、`FPSProjectile` クラス インターフェースを探して、 `FPSProjectile.h` を開きます。

1.	次のコードを `FPSProjectile` クラスの宣言に追加します。

		// 発射物が何かにぶつかると呼び出されます。
		UFUNCTION()
		void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);

1.	`FPSProjectile.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Actor.h"

		#include "FPSProjectile.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()
			public:

			// このアクタのプロパティのデフォルト値を設定します。
			AFPSProjectile();
		// 簡易なコリジョン表現として球体を追加するためのコンストラクタ

			AFPSProjectile(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 発射方向の発射物のべロシティを初期化します。

			void InitVelocity(const FVector& ShootDirection);
		// Sphere collision コンポーネント

			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComp;
		// Projectile Movement コンポーネント

			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movement)
			UProjectileMovementComponent* ProjectileMovement;
		// 発射物が何かにぶつかると呼び出されます。

			UFUNCTION()
			void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
		};

1.	**[Solution Explorer]** で、`FPSProjectile` クラスを探して、 `FPSProjectile.cpp` を開きます。

1.	次のコードを `OnHit` 関数の定義に追加します。

		void AFPSProjectile::OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)
		{
			if (OtherActor != NULL && OtherActor != this && OtherComp != NULL)
			{
				OtherComp->AddImpulseAtLocation(ProjectileMovement->Velocity * 100.f, Hit.ImpactPoint);
			}
		}

1.	 `FPSProjectile` コンストラクタで、`CollisionComp` 作成の後に以下の行を追加します。

		CollisionComp->OnComponentHit.AddDynamic(this, &AFPSProjectile::OnHit);

1.	`FPSProjectile.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSProjectile.h"
		// デフォルト値を設定

		AFPSProjectile::AFPSProjectile()
		{
		 	// フレーム毎に Tick() を呼び出すようにこのアクタを設定。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
			// 3 秒後に消滅 (デフォルト設定)

			InitialLifeSpan = 3.f;
		}
		// コンストラクタ

		AFPSProjectile::AFPSProjectile(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// 簡易なコリジョン表現に球体を使用
			CollisionComp = ObjectInitializer.CreateDefaultSubobject<USphereComponent>(this, TEXT("SphereComp"));
		if (CollisionComp != NULL)

			{
				CollisionComp->BodyInstance.SetCollisionProfileName("Projectile");
				CollisionComp->OnComponentHit.AddDynamic(this, &AFPSProjectile::OnHit);
				CollisionComp->InitSphereRadius(15.f);
				RootComponent = CollisionComp;
		// この発射物の動作管理に ProjectileMovement コンポーネントを利用します。

				ProjectileMovement = ObjectInitializer.CreateDefaultSubobject<UProjectileMovementComponent>(this, TEXT("ProjectileComp"));
		if (ProjectileMovement != NULL)

				{
					ProjectileMovement->UpdatedComponent = CollisionComp;
					ProjectileMovement->InitialSpeed = 3000.f;
					ProjectileMovement->MaxSpeed = 3000.f;
					ProjectileMovement->bRotationFollowsVelocity = true;
					ProjectileMovement->bShouldBounce = true;
					ProjectileMovement->Bounciness = 0.3f;
				}
			}
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();
			}

		// フレームごとに呼ばれます。

		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 発射方向の発射物のべロシティを初期化します。

		void AFPSProjectile::InitVelocity(const FVector& ShootDirection)
		{
			if (ProjectileMovement != NULL)
			{
				// 発射物のベロシティを希望する方向へ設定します。
				ProjectileMovement->Velocity = ShootDirection * ProjectileMovement->Speed;
			}
		}
		void AFPSProjectile::OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)

		{
			if (OtherActor != NULL && OtherActor != this && OtherComp != NULL)
			{
				OtherComp->AddImpulseAtLocation(ProjectileMovement->Velocity * 100.f, Hit.ImpactPoint);
			}
		}

1.	`FPSProjectile.h` と `FPSProjectile.cpp` を Visual Studio に保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildFPSProject.png)

## 発射物のコリジョンをテストする

1.	ビルドが終了したら **アンリアル エディタ** に戻り、**FPSProject** を開きます。

1.	**Floor** `StaticMesh` を選択します。

1.	 floor メッシュを **コピー & 貼り付け** します。

1.	比率のロックを必ず解除して、floor メッシュのコピー ("Floor2" と呼びます) を  {0.2, 0.2, 0.3} にスケーリングします。

1.	floor メッシュのコピーを {320, 0, 160} に配置します。

	[REGION:lightbox]
		[![](Floor2_CubeTransform.png)(w:750)](Floor2_CubeTransform.png)
	[/REGION]
	_ズームインするには画像をクリックします。_

1.	**[Physics]** セクションまで下にスクロールして、**Simulate Physics** ボックスにチェックを入れます。

	[REGION:lightbox]
		[![](Floor2_CubePhysics.png)(w:750)](Floor2_CubePhysics.png)
	[/REGION]
	_ズームインするには画像をクリックします。_

1.	マップを **保存** します。

1.	**BP_FPSProjectile** を **ダブルクリック** して、編集のために projectile ブループリントを開きます。

1.	**Defaults Mode (デフォルト モード)** を開きます。

1.	**[Components]** タブで **ProjectileMesh** を **クリック** します。

1.	**Collision** の **Collision Presets** プロパティを探して、**Projectile** に設定します。

	![](SetCollisionPresets.png)

1.	ブループリントを **コンパイル** し、**保存** してから、**ブループリント エディタ** を閉じます。

1.	**レベル エディタのツールバー** で、**[Play In]** ボタンを **クリック** します。

1.	**左クリック** で発射物の発射およびキューブをレベル内で移動させます。これで発射物が完成しました！

	![](ProjectileComplete.png)

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで **[Stop]** ボタンを **クリック** します。

%Steps%