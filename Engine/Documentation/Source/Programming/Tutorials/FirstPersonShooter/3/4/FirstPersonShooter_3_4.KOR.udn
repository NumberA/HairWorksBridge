INTSourceChangelist:2672916
Availability: Docs
Title: 3.4 - 월드와 상호작용하는 발사체
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description: 일인칭 슈팅 프로젝트에서 발사체가 월드와 상호작용하도록 하는 법을 배워봅니다.
SkillLevel: Beginner
Version: 4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[예전 단계](Programming/Tutorials/FirstPersonShooter/3/3)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[섹션 홈](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[다음 단계](Programming/Tutorials/FirstPersonShooter/3/5)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

프로젝타일의 콜리전 상호작용을 감지할 수 있으니, 이제 그 콜리전에 어떻게 반응할지를 결정하면 됩니다. 이번 단계에서는, 콜리전 이벤트에 반응하는 `FPSProjectile` 에 `OnHit` 함수를 추가하겠습니다.

## 프로젝타일이 콜리전에 반응하도록 만들기

1.	**Solution Explorer** 에서 `FPSProjectile` 클래스 인터페이스 파일을 찾고 `FPSProjectile.h` 를 엽니다.

1.	`FPSProjectile` 클래스 정의에 다음 코드를 추가합니다:

		// 발사체가 무언가에 맞으면 호출됩니다.
		UFUNCTION()
		void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);

1.	`FPSProjectile.h` 는 이제 다음과 같을 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#pragma once
		
		#include "GameFramework/Actor.h"
		#include "FPSProjectile.generated.h"
		
		UCLASS()
		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()
			
		public:	
			// 이 액터 프로퍼티의 기본값을 설정합니다.
			AFPSProjectile();
		
			// 구체를 단순 콜리전 표현으로 추가하기 위한 생성자입니다.
			AFPSProjectile(const FObjectInitializer& ObjectInitializer);
		
			// 게임 시작시 또는 스폰시 호출됩니다.
			virtual void BeginPlay() override;
			
			// 매 프레임 호출됩니다.
			virtual void Tick( float DeltaSeconds ) override;
		
			// 발사체의 속도를 발사 방향으로 초기화시킵니다.
			void InitVelocity(const FVector& ShootDirection);
		
			// 구체 콜리전 컴포넌트입니다.
			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComp;
		
			// 프로젝타일 무브먼트 컴포넌트
			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movement)
			UProjectileMovementComponent* ProjectileMovement;
		
			// 발사체가 무언가에 맞으면 호출됩니다.
			UFUNCTION()
			void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
		};

1.	**Solution Explorer** 에서 `FPSProjectile` 클래스 구현 파일을 찾고 `FPSProjectile.cpp` 를 엽니다.

1.	`OnHit` 함수 정의부에 다음 코드를 추가합니다:

		void AFPSProjectile::OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)
		{
			if (OtherActor != NULL && OtherActor != this && OtherComp != NULL)
			{
				OtherComp->AddImpulseAtLocation(ProjectileMovement->Velocity * 100.f, Hit.ImpactPoint);
			}
		}

1.	`FPSProjectile` 생성자에서, `CollisionComp` 생성 후 다음 줄을 추가합니다:

		CollisionComp->OnComponentHit.AddDynamic(this, &AFPSProjectile::OnHit);

1.	`FPSProjectile.cpp` 는 이제 다음과 같은 모습일 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSProjectile.h"
		
		// Sets default values
		AFPSProjectile::AFPSProjectile()
		{
		 	// 이 액터가 매 프레임 Tick() 을 호출하도록 설정합니다. 필요치 않은 경우 끄면 퍼포먼스가 향상됩니다.
			PrimaryActorTick.bCanEverTick = true;
			
			// 3 초 뒤에 죽습니다 (기본).
			InitialLifeSpan = 3.f;
		}
		
		// 생성자
		AFPSProjectile::AFPSProjectile(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			// 구체를 단순 콜리전 표현으로 사용합니다.
			CollisionComp = ObjectInitializer.CreateDefaultSubobject<USphereComponent>(this, TEXT("SphereComp"));
		
			if (CollisionComp != NULL)
			{
				CollisionComp->BodyInstance.SetCollisionProfileName("Projectile");
				CollisionComp->OnComponentHit.AddDynamic(this, &AFPSProjectile::OnHit);
				CollisionComp->InitSphereRadius(15.f);
				RootComponent = CollisionComp;
		
				// ProjectileMovementComponent 를 사용하여 이 발사체의 운동을 관장합니다.
				ProjectileMovement = ObjectInitializer.CreateDefaultSubobject<UProjectileMovementComponent>(this, TEXT("ProjectileComp"));
		
				if (ProjectileMovement != NULL)
				{
					ProjectileMovement->UpdatedComponent = CollisionComp;
					ProjectileMovement->InitialSpeed = 3000.f;
					ProjectileMovement->MaxSpeed = 3000.f;
					ProjectileMovement->bRotationFollowsVelocity = true;
					ProjectileMovement->bShouldBounce = true;
					ProjectileMovement->Bounciness = 0.3f;
				}
			}
		}
		
		// 게임 시작시 또는 스폰시 호출됩니다.
		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();
			
		}
		
		// 매 프레임 호출됩니다.
		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		
		}
		
		// 발사체의 속도를 발사 방향으로 초기화시킵니다.
		void AFPSProjectile::InitVelocity(const FVector& ShootDirection)
		{
			if (ProjectileMovement != NULL)
			{
				// 발사체의 속도를 원하는 방향으로 설정합니다.
				ProjectileMovement->Velocity = ShootDirection * ProjectileMovement->InitialSpeed;
			}
		}
		
		void AFPSProjectile::OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)
		{
			if (OtherActor != NULL && OtherActor != this && OtherComp != NULL)
			{
				OtherComp->AddImpulseAtLocation(ProjectileMovement->Velocity * 100.f, Hit.ImpactPoint);
			}
		}

1.	Visual Studio 에서 `FPSProjectile.h` 와 `FPSProjectile.cpp` 를 저장합니다.

1.	**Solution Explorer** 에서 **FPSProject** 를 찾습니다.

1.	**FPSProject** 에 우클릭한 다음 **Build** 를 선택하여 프로젝트를 빌드합니다.

	![](BuildFPSProject.png)

## 발사체 콜리전 테스트

1.	빌드 완료 후, **언리얼 에디터** 로 돌아가 **FPSProject** 를 엽니다.

1.	**Floor** `StaticMesh` 를 선택합니다.

1.	바닥 메시를 **복사 & 붙여넣기** 합니다.

1.	비율 고정이 풀렸는지 확인하고, (이름이 Floor2 인) 바닥 메시 사본의 스케일을 {0.2, 0.2, 0.3} 로 설정합니다.

1.	바닥 메시 사본 위치는 {320, 0, 160} 으로 조정합니다.

	[REGION:lightbox]
		[![](Floor2_CubeTransform.png)(w:750)](Floor2_CubeTransform.png)
	[/REGION]
	_이미지를 클릭하면 줌인합니다._

1.	**Physics** 섹션으로 스크롤해 내려간 뒤 **Simulate Physics** (피직스 시뮬레이션) 옵션을 체크합니다.

	[REGION:lightbox]
		[![](Floor2_CubePhysics.png)(w:750)](Floor2_CubePhysics.png)
	[/REGION]
	_이미지를 클릭하면 줌인 합니다._

1.	맵을 **저장** 합니다.

1.	**BP_FPSProjectile** 에 더블클릭하여 발사체 블루프린트를 편집용으로 엽니다.

1.	**디폴트 모드** 를 엽니다.

1.	**컴포넌트** 탭에서 **ProjectileMesh** 를 클릭합니다.

1.	**Collision** 아래에서 **Collision Presets** 프로퍼티를 찾은 다음 **Projectile** 로 설정합니다..

	![](SetCollisionPresets.png)

1.	블루프린트를 **컴파일**, **저장** 한 뒤 **블루프린트 에디터** 를 닫습니다.

1.	**레벨 에디터 툴바** 의 **플레이** 버튼을 클릭합니다.

1.	**좌클릭** 하여 발사체를 발사하고 레벨에 큐브를 이동시킬 수 있습니다. 축하합니다, 발사체가 완성되었습니다!

	![](ProjectileComplete.png)

1.	레벨 에디터에서 **중지** 버튼을 눌러 에디터에서 플레이 (PIE) 모드를 빠져나갑니다.

%Steps%