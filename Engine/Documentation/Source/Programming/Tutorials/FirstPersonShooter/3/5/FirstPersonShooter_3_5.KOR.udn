INTSourceChangelist:2672916
Availability: Docs
Title: 3.5 - 뷰포트에 조준선 추가
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description: 일인칭 슈팅 프로젝트의 뷰포트에 조준선을 추가하는 법을 배워봅니다.
SkillLevel: Beginner
Version: 4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[예전 단계](Programming/Tutorials/FirstPersonShooter/3/4)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[섹션 홈](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[다음 섹션](Programming/Tutorials/FirstPersonShooter/4)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

[REGION:note]
시작하기에 앞서, 다음 링크에서 샘플 이미지를 다운로드하고 압축을 풀어주세요:
*	[샘플 조준선 이미지](Crosshair_fps_tutorial.zip "샘플 조준선 이미지")
[/REGION]

이번 단계에서는 게임에 조준선 HUD 요소를 추가하여 발사체를 조준할 수 있도록 하겠습니다.

## 조준선 애셋 임포트

1.	콘텐츠 브라우저의 파일창 안에 우클릭하여 **애세 임포트** 대화창을 엽니다.

1.	**/Game... 에 임포트** 를 눌러 **임포트** 대화 상자를 엽니다.

	![](RightClickImport.png)

1.	**crosshair.TGA** 이미지 파일을 찾아 선택합니다.

1.	**열기** 를 클릭하여 프로젝트에 이미지 파일 임포트를 시작합니다.

1.	**저장** 버튼을 눌러 임포트된 메시를 저장합니다.

## 새 HUD 클래스 추가

1.	파일 메뉴에서 **새 C++ 클래스...** 를 선택합니다.

1.	**부모 클래스 선택** 메뉴가 열립니다. 스크롤해 내려가 **HUD** 를 부모 클래스로 선택하고 **다음** 을 클릭합니다.

	![](ChooseHUDClass.png)

1.	새 클래스 이름은 "FPSHUD" 라 하고 **생성** 을 클릭합니다.

	![](NameHUDClass.png)

1.	**Solution Explorer** 에서 `FPSHUD` 클래스 인터페이스 파일을 찾아 `FPSHUD.h` 를 엽니다.

1.	`FPSHUD.h` 에서 `GENERATED_BODY()` 아래 다음 생성자 선언을 넣습니다:

		AFPSHUD(const FObjectInitializer& ObjectInitializer);

1.	**Solution Explorer** 에서 `FPSHUD` 클래스 구현 파일을 찾아 `FPSHUD.cpp` 를 엽니다.

1.	`FPSHUD.h` 에서 `GENERATED_BODY()` 아래 다음 생성자 정의부를 작성합니다:

		AFPSHUD::AFPSHUD(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
		
		}

1.	`FPSHUD.h` 로 돌아가 다음 프라이빗 변수를 추가합니다:

		private:
		
			// 조준선 애셋 포인터
			UTexture2D* CrosshairTex;

1.	이제 `FPSHUD.cpp` 에 위치한 생성자 안에 다음 코드를 추가합니다:

		// 조준선 텍스처를 설정합니다.
		static ConstructorHelpers::FObjectFinder<UTexture2D> CrosshairTexObj(TEXT("Texture2D'/Game/crosshair.crosshair'"));
		
		if (CrosshairTexObj.Object != NULL)
		{
			CrosshairTex = CrosshairTexObj.Object;
		}

	[REGION:note]
	참고로 텍스처 애셋 경로는 에디터의 콘텐츠 브라우저에서 애셋에 우클릭한 다음 '레퍼런스 복사' 를 선택하여 얻을 수 있습니다.
	![](CopyReference.png)
	[/REGION]

1.	`FPSHUD.h` 로 돌아가, `GENERATED_BODY()` 아래 다음 함수 선언부를 추가합니다:

		// HUD 에 대한 주요 드로 콜입니다.
		virtual void DrawHUD() override;

1.	이제 `FPSHUD.cpp` 의 `DrawHUD` 오버라이드를 다음 함수 정의부로 구현합니다:

		void AFPSHUD::DrawHUD()
		{
			Super::DrawHUD();
			// 단순한 조준선을 그립니다.
			// 캔버스 중심을 찾습니다.
			const FVector2D Center(Canvas->ClipX * 0.5f, Canvas->ClipY * 0.5f);
			// 텍스처 크기 절반만큼 오프셋을 적용하여 텍스처 중심을 캔버스 중심에 정렬시킵니다.
			const FVector2D CrossHairDrawPosition((Center.X - (CrosshairTex->GetSurfaceWidth() * 0.5f)), (Center.Y - (CrosshairTex->GetSurfaceHeight() * 0.5f)));
			// 조준선을 그립니다.
			FCanvasTileItem TileItem(CrossHairDrawPosition, CrosshairTex->Resource, FLinearColor::White);
			TileItem.BlendMode = SE_BLEND_Translucent;
			Canvas->DrawItem(TileItem);
		}

1.	`FPSHUD.h` 는 다음과 같을 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#pragma once
		
		#include "GameFramework/HUD.h"
		#include "FPSHUD.generated.h"
		
		/**
		 * 
		 */
		UCLASS()
		class FPSPROJECT_API AFPSHUD : public AHUD
		{
			GENERATED_BODY()
		
			AFPSHUD(const FObjectInitializer& ObjectInitializer);
		
			// HUD 에 대한 주요 드로 콜입니다.
			virtual void DrawHUD() override;
		
		private:
		
			// 조준선 애셋 포인터입니다.
			UTexture2D* CrosshairTex;
			
		};

1.	`FPSHUD.cpp` 는 이제 다음과 같을 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSHUD.h"
		
		AFPSHUD::AFPSHUD(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			// 조준선 텍스처를 설정합니다.
			static ConstructorHelpers::FObjectFinder<UTexture2D> CrosshairTexObj(TEXT("Texture2D'/Game/crosshair.crosshair'"));
			
			if (CrosshairTexObj.Object != NULL)
			{
				CrosshairTex = CrosshairTexObj.Object;
			}
		}
		
		void AFPSHUD::DrawHUD()
		{
			Super::DrawHUD();
			// 단순한 조준선을 그립니다.
			// 캔버스 중심을 찾습니다.
			const FVector2D Center(Canvas->ClipX * 0.5f, Canvas->ClipY * 0.5f);
			// 텍스처 크기 절반만큼 오프셋을 적용하여 텍스처 중심을 캔버스 중심에 정렬시킵니다.
			const FVector2D CrossHairDrawPosition((Center.X - (CrosshairTex->GetSurfaceWidth() * 0.5f)), (Center.Y - (CrosshairTex->GetSurfaceHeight() * 0.5f)));
			// 조준선을 그립니다.
			FCanvasTileItem TileItem(CrossHairDrawPosition, CrosshairTex->Resource, FLinearColor::White);
			TileItem.BlendMode = SE_BLEND_Translucent;
			Canvas->DrawItem(TileItem);
		}

1.	Visual Studio 에서 `FPSHUD.h` 와 `FPSHUD.cpp` 를 저장합니다.

1.	**Solution Explorer** 에서 **FPSProject** 를 찾습니다.

1.	**FPSProject** 에 우클릭한 다음 **Build** 를 선택하여 프로젝트를 컴파일합니다.

	![](BuildFPSProject.png)

## 새 HUD 클래스를 사용하도록 GameMode 수정

1.	`FPSGameMode.cpp`상단에 다음 인클루드 구문을 추가합니다:

		#include "FPSHUD.h"

1.	`FPSGameMode.cpp` 안의 `FPSGameMode` 생성자에서 다음 코드 줄을 추가합니다:

		HUDClass = AFPSHUD::StaticClass();

1.	`FPSGameMode.cpp` 는 다음과 같을 것입니다:

		// 프로젝트 세팅의 설명 페이지에서 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSGameMode.h"
		#include "FPSHUD.h"
		
		AFPSGameMode::AFPSGameMode(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			// 기본 폰 클래스를 블루프린트화된 캐릭터로 설정합니다.
			static ConstructorHelpers::FClassFinder<APawn> PlayerPawnObject(TEXT("Pawn'/Game/Blueprints/BP_FPSCharacter.BP_FPSCharacter_C'"));
			if (PlayerPawnObject.Class != NULL)
			{
				DefaultPawnClass = PlayerPawnObject.Class;
			}
			HUDClass = AFPSHUD::StaticClass();
		}//AFPSGameMode 생성자
		
		void AFPSGameMode::StartPlay()
		{
			Super::StartPlay();
		
			StartMatch();
		
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Yellow, TEXT("We are using FPSGameMode."));
			}
		}//StartPlay()

1.	Visual Studio 에서 `FPSGameMode.cpp` 를 저장합니다.

1.	**Solution Explorer** 에서 **FPSProject** 를 찾습니다.

1.	**FPSProject** 에 우클릭한 다음 **Build** 를 선택하여 프로젝트를 컴파일합니다.

	![](BuildFPSProject.png)

1.	빌드 완료 후 언리얼 에디터에서 **FPSProject** 를 엽니다.

1.	레벨 에디터 툴바의 **플레이** 버튼을 클릭합니다. 새로 만든 조준선으로 발사체를 조준할 수 있을 것입니다.

	![](CrosshairsInGame.png)

1.	레벨 에디터의 **중지** 버튼을 클릭하여 에디터에서 플레이 (PIE) 모드를 빠져나갑니다.

축하합니다! 지금까지 배운 내용은 다음과 같습니다:

&#x2713; 게임에 발사체 추가
&#x2713; 슈팅 구현
&#x2713; 발사체 콜리전 및 수명 구성
&#x2713; 월드와 상호작용하는 발사체
&#x2713; 뷰포트에 조준선 추가

다음 섹션에서는 이제 캐릭터 애니메이션 방법을 배워보겠습니다.

%Steps%