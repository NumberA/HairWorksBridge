INTSourceChangelist:2672916
Availability:Docs
Title:3.2 - シューティングを実装する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description:First Person Shooter キャラクターにシューティングを実装する方法を学びます。
SkillLevel:初心者向け
Version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/3/1 "")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/3/3)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

このステップでは、`OnFire` 関数を実装し、キャラクターが発射物 (プロジェクタイル) を発射を開始できるようにします。

1.	**Solution Explorer** で、`FPSCharacter` クラス実装ファイルを探して、`FPSCharacter.cpp` を開きます。

1.	`FPSCharacter.cpp` の上に、以下の `#include` を追加します。

		#include "FPSProjectile.h"

1.	次の `OnFire` 関数定義を `FPSCharacter.cpp` に追加します。

		void AFPSCharacter::OnFire()
		{
			// 発射物を発射しようとします。
			if (ProjectileClass != NULL)
			{
				// カメラの平行移動を取得
				FVector CameraLocation;
				FRotator CameraRotation;
				GetActorEyesViewPoint(CameraLocation, CameraRotation);
				// MuzzleOffset (銃口オフセット) はカメラ空間にあるため、銃口の最終位置を見つけるために、カメラからオフセットする前にワールド空間へ変換する必要があります。

				FVector const MuzzleLocation = CameraLocation + FTransform(CameraRotation).TransformVector(MuzzleOffset);
				FRotator MuzzleRotation = CameraRotation;
				MuzzleRotation.Pitch += 10.f; // slightly skew the aim upwards
				UWorld* const World = GetWorld();
				if (World != NULL)
				{
					FActorSpawnParameters SpawnParams;
					SpawnParams.Owner = this;
					SpawnParams.Instigator = Instigator;
					// 銃口で発射物をスポーンします。
					AFPSProjectile* const Projectile = World->SpawnActor<AFPSProjectile>(ProjectileClass, MuzzleLocation, MuzzleRotation, SpawnParams);
					if (Projectile != NULL)
					{
						// 発射位置を見つけます。
						FVector const LaunchDirection = MuzzleRotation.Vector();
						Projectile->InitVelocity(LaunchDirection);
					}
				}
			}
		}

1.	`FPSCharacter.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		#include "FPSProjectile.h"
		// デフォルト値を設定

		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// camera コンポーネントを作成するコンストラクタ

		AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// Camera コンポーネントを作成
			FirstPersonCameraComponent = ObjectInitializer.CreateDefaultSubobject<UCameraComponent>(this, TEXT("FirstPersonCamera"));
		if (FirstPersonCameraComponent != NULL)

			{
				FirstPersonCameraComponent->AttachParent = GetCapsuleComponent();
				// 目の高さより少し上にカメラを設定
				FirstPersonCameraComponent->RelativeLocation = FVector(0.f, 0.f, 50.f + BaseEyeHeight);
				// ポーンが回転を制御できるようにします。
				FirstPersonCameraComponent->bUsePawnControlRotation = true;
			}
		// このポーンの制御時、一人称視点で見ている時に使用されるメッシュコンポーネントを作成。

			FirstPersonMesh = ObjectInitializer.CreateDefaultSubobject<USkeletalMeshComponent>(this, TEXT("FirstPersonMesh"));
		if (FirstPersonMesh != NULL)

			{
				FirstPersonMesh->SetOnlyOwnerSee(true);// このメッシュは所有しているプレイヤーだけから見えます。
				FirstPersonMesh->AttachParent = FirstPersonCameraComponent;
				bPressedJump = false;
				FirstPersonMesh->CastShadow = false;
			}
		// オーナー以外は誰でも通常のボディメッシュを見ることができます。

			GetMesh()->SetOwnerNoSee(true);
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		// フレームごとに呼ばれます。

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 機能と入力をバインドするために呼ばれます。

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			// ゲームプレイのキーバインドをセットアップ

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
			// ゲームプレイのマウス バインドのセットアップ
			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
			// ジャンプ アクションのバインドのセットアップ。
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
			// 銃の発砲アクションのバインディングをセットアップします。
			InputComponent->BindAction("Fire", IE_Pressed, this, &AFPSCharacter::OnFire);
		}
		//前方向の移動の関数の定義

		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 前進方向の確認
				FRotator Rotation = Controller->GetControlRotation();
				// 歩行または落下時のピッチ (上下動) の制限
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				// その方向へ動きを追加
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}
		//右移動の関数の定義

		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 右方向の確認
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				// その方向へ動きを追加
				AddMovementInput(Direction, Value);
			}
		}
		//ジャンプ フラグを設定する関数

		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		//ジャンプ フラグをクリアする関数

		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}
		void AFPSCharacter::OnFire()

		{
			// 発射物を発射しようとします。
			if (ProjectileClass != NULL)
			{
				// カメラの平行移動を取得
				FVector CameraLocation;
				FRotator CameraRotation;
				GetActorEyesViewPoint(CameraLocation, CameraRotation);
				// MuzzleOffset (銃口オフセット) はカメラ空間にあるため、銃口の最終位置を見つけるために、カメラからオフセットする前にワールド空間へ変換する必要があります。

				FVector const MuzzleLocation = CameraLocation + FTransform(CameraRotation).TransformVector(MuzzleOffset);
				FRotator MuzzleRotation = CameraRotation;
				MuzzleRotation.Pitch += 10.f; // slightly skew the aim upwards
				UWorld* const World = GetWorld();
				if (World != NULL)
				{
					FActorSpawnParameters SpawnParams;
					SpawnParams.Owner = this;
					SpawnParams.Instigator = Instigator;
					// 銃口で発射物をスポーンします。
					AFPSProjectile* const Projectile = World->SpawnActor<AFPSProjectile>(ProjectileClass, MuzzleLocation, MuzzleRotation, SpawnParams);
					if (Projectile != NULL)
					{
						// 発射位置を見つけます。
						FVector const LaunchDirection = MuzzleRotation.Vector();
						Projectile->InitVelocity(LaunchDirection);
					}
				}
			}
		}

1.	`FPSCharacter.cpp` を Visual Studio に保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildFPSProject.png)

## Projectile ブループリントを構築する

[REGION:note]
先に進む前に、次のリンクからサンプル メッシュをダウンロードし、抽出してください。
["Projectile Mesh"](Sphere.zip "Projectile Mesh")
[/REGION]

1.	コンテンツ ブラウザのファイル ボックス内で **右クリック** して **インポート アセット** ダイアログボックスを開きます。

1.	**'Import to /Game...' をクリック** して **[Import]** ダイアログボックスを開きます。

	![](RightClickImport.png)

1.	  **Sphere.fbx** メッシュ ファイルを探して選択します。

1.	プロジェクトへのメッシュのインポートを開始するには、**Open をクリック** します。

1.	**コンテンツ ブラウザ** に、**[FBX Import Options]** ダイアログ ボックスが表示されます。メッシュをプロジェクトに追加するには、**インポートをクリック** します。

	[REGION:warning]
	スムージング グループに関する以下のエラーは無視してください。
	![](FBXWarning.png)  
	このメッシュは一人称メッシュの設定を表していますが、この後のセクションで設定するアニメーションでも機能します。
	[/REGION]

1.	**[Save]** ボタンを **クリック** してインポートしたスタティックメッシュを保存します。

1.	**コンテンツ ブラウザ** の **Blueprints** フォルダに戻ります。

1.	 **[Add New]** ボタンをクリックして、**Blueprint クラス** を選択します。

	![](AddNewBPClass.png)

1.	**[All Classes]** ドロップダウン メニューを展開して、検索ボックスに "FPSProjectile" と入力します。

	![](AddNewBPClass.png)

1.	**FPSCharacter** の上で **クリック** して、**[Select]** ボタンを **クリック** します。

1.	新しいブループリントに、"BP_FPSProjectile" と名前を付けます。

	![](NameBP_FPSProjectile.png)

1. 	 **ブループリント エディタ** 内で **BP_FPSCharacter** のアイコンを **ダブルクリック** して開きます。

1.	**[Components]** タブで **CollisionComp** コンポーネントを **クリック** します。

1.	**[Add Component (コンポーネント追加)]** ドロップダウン リストを **クリック** して、 **Static Mesh** を選択します。

	![](AddStaticMeshComponent.png)

1.	新しいコンポーネントに "ProjectileMesh" と名前を付けます。

	![](NameProjectileMeshComponent.png)

1.	**[Details (詳細)]** タブの **Mesh** セクションまで下にスクロールして、"None" と表示されているドロップダウン メニュー上で **クリック** します。

1.	 **Sphere** スタティックメッシュを選択します。

	![](SelectSphereMesh.png)

	[REGION:note]
	マルチプレイヤー ゲームを制作している場合、発射物がサーバー上で正しくレプリケートするように、"MovementComp" コンポーネントの "Initial Velocity in Local Space" のチェックも外す必要があります。
	[/REGION]

1.	 X、Y、および Z のスケール値を 0.09 に設定します。

	[REGION:note]
	ロック アイコンをクリックすると 3 つの軸が全てロックされて、相対スケールが保たれます。
	[/REGION]

1.	**ProjectileMesh の Collision Presets** 値を、**NoCollision** に設定します(コリジョンにこの **スタティックメッシュ** ではなく、`SphereComponent` を使用しているため）。	

	![](SetCollisionPresets.png)

1.	ブループリントを **コンパイル** し、**保存** してから、**ブループリント エディタ** を閉じます。

1.	**BP_FPSCharacter** を **ダブルクリック** して、編集のために character ブループリントを開きます。

1.	**Defaults Mode (デフォルト モード)** を開きます。

1.	**[Projectile Class]** プロパティを探して、 **[BP_FPSProjectile]** へ設定します。

1.	カメラの少し手前で発射物をスポーンするために、 **[MuzzleOffset]** プロパティを {100, 0, 00} に設定します。

	![](CharacterProjectileClass.png)

1.	ブループリントを **コンパイル** し、**保存** してから、**ブループリント エディタ** を閉じます。

## インゲームで発射物を発射する

1.	**レベル エディタのツールバー** で、**[Play In]** ボタンを **クリック** し、インゲームで発射物を発射します。

1.	**左クリック** して、発射物をワールドに発射します。

	![](FiringProjectiles.png)

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで **[Stop]** ボタンを **クリック** します。

%Steps%