INTSourceChangelist:2672916
Availability: Docs
Title: 3.2 - 발사 구현
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description: 일인칭 슈팅 캐릭터의 발사 방법을 배워봅니다.
SkillLevel: Beginner
Version: 4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[예전 단계](Programming/Tutorials/FirstPersonShooter/3/1)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[섹션 홈](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[다음 단계](Programming/Tutorials/FirstPersonShooter/3/3)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

이번 단계에서는 캐릭터가 발사체 발사를 시작할 수 있도록 `OnFire` 함수를 구현해 보겠습니다.

1.	**Solution Explorer** 에서 `FPSCharacter` 클래스 구현 파일을 찾고 `FPSCharacter.cpp` 를 엽니다.

1.	`FPSCharacter.cpp` 상단에 다음 `#include` 를 추가합니다.

		#include "FPSProjectile.h"

1.	`FPSCharacter.cpp` 에 다음 `OnFire` 함수 정의를 추가합니다:

		void AFPSCharacter::OnFire()
		{
			// 발사체 발사를 시도합니다.
			if (ProjectileClass != NULL)
			{
				// 카메라 트랜스폼을 구합니다.
				FVector CameraLocation;
				FRotator CameraRotation;
				GetActorEyesViewPoint(CameraLocation, CameraRotation);
				
				// MuzzleOffset 은 카메라 스페이스라 최종 총구 위치는 월드 스페이스로 변환한 다음 카메라에 오프셋을 적용해야 합니다.
				FVector const MuzzleLocation = CameraLocation + FTransform(CameraRotation).TransformVector(MuzzleOffset);
				FRotator MuzzleRotation = CameraRotation;
				MuzzleRotation.Pitch += 10.f; // 조준을 약간 윗쪽으로 올려줍니다.
				UWorld* const World = GetWorld();
				if (World != NULL)
				{
					FActorSpawnParameters SpawnParams;
					SpawnParams.Owner = this;
					SpawnParams.Instigator = Instigator;
					// 총구 위치에 발사체를 스폰시킵니다.
					AFPSProjectile* const Projectile = World->SpawnActor<AFPSProjectile>(ProjectileClass, MuzzleLocation, MuzzleRotation, SpawnParams);
					if (Projectile != NULL)
					{
						// 발사 방향을 알아냅니다.
						FVector const LaunchDirection = MuzzleRotation.Vector();
						Projectile->InitVelocity(LaunchDirection);
					}
				}
			}
		}

1.	`FPSCharacter.cpp` 는 이제 다음과 같을 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSCharacter.h"
		#include "FPSProjectile.h"
		
		// 기본값을 설정합니다.
		AFPSCharacter::AFPSCharacter()
		{
		 	// 이 캐릭터가 TIck() 을 매 프레임 호출하도록 설정합니다. 필요치 않은 경우 끄면 퍼포먼스가 향상됩니다.
			PrimaryActorTick.bCanEverTick = true;
		
		}
		
		// 카메라 컴포넌트를 생성하는 생성자입니다.
		AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			// 카메라 컴포넌트를 생성합니다.
			FirstPersonCameraComponent = ObjectInitializer.CreateDefaultSubobject<UCameraComponent>(this, TEXT("FirstPersonCamera"));
		
			if (FirstPersonCameraComponent != NULL)
			{
				FirstPersonCameraComponent->AttachParent = GetCapsuleComponent();
				// 카메라를 눈 약간 위쪽으로 위치시킵니다.
				FirstPersonCameraComponent->RelativeLocation = FVector(0.f, 0.f, 50.f + BaseEyeHeight);
				// 폰이 회전 제어를 가능하도록 합니다.
				FirstPersonCameraComponent->bUsePawnControlRotation = true;
			}
		
			// 이 폰을 제어할 때 일인칭 뷰에서 봤을 때 사용할 메시 컴포넌트를 생성합니다.
			FirstPersonMesh = ObjectInitializer.CreateDefaultSubobject<USkeletalMeshComponent>(this, TEXT("FirstPersonMesh"));
		
			if (FirstPersonMesh != NULL)
			{
				FirstPersonMesh->SetOnlyOwnerSee(true);  // 소유 플레이어만 이 메시를 보게됩니다.
				FirstPersonMesh->AttachParent = FirstPersonCameraComponent;
				FirstPersonMesh->bCastDynamicShadow = false;
				FirstPersonMesh->CastShadow = false;
			}
		
			// 오너를 제외한 모두가 일반 바디 메시를 볼 수 있습니다.
			GetMesh()->SetOwnerNoSee(true);
		}
		
		// 게임 시작시 또는 스폰시 호출됩니다.
		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		
		// 매 프레임 호출됩니다.
		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		
		}
		
		// 입력에 함수성을 바인딩하기 위해 호출됩니다.
		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			
			// 게임플레이 키 바인딩을 구성합니다.
			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
			// 게임플레이 마우스 바인딩을 구성합니다.
			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
			// 점프 동작 바인딩을 구성합니다.
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
			// 총 발사 액션 바인딩을 구성합니다.
			InputComponent->BindAction("Fire", IE_Pressed, this, &AFPSCharacter::OnFire);
		}
		
		// 전방 이동 함수 정의입니다.
		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				//어디가 전방인지 알아냅니다.
				FRotator Rotation = Controller->GetControlRotation();
				//걸을 때 낙하를 대비해 핏치를 제한시킵니다.
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				//그 방향으로 동작을 더합니다.
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}
		
		//우측 이동 함수 정의입니다.
		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				//어디가 우측인지 알아냅니다.
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::Y);
				//그 방향으로 동작을 더합니다.
				AddMovementInput(Direction, Value);
			}
		}
		
		//점프 플래그를 설정하는 함수입니다.
		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		
		//점프 플래그를 지우는 함수입니다.
		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}
		
		void AFPSCharacter::OnFire()
		{
			// 발사체 발사를 시도합니다.
			if (ProjectileClass != NULL)
			{
				// 카메라 트랜스폼을 구합니다.
				FVector CameraLocation;
				FRotator CameraRotation;
				GetActorEyesViewPoint(CameraLocation, CameraRotation);
				
				// MuzzleOffset 은 카메라 스페이스라 최종 총구 위치는 월드 스페이스로 변환한 다음 카메라에 오프셋을 적용해야 합니다.
				FVector const MuzzleLocation = CameraLocation + FTransform(CameraRotation).TransformVector(MuzzleOffset);
				FRotator MuzzleRotation = CameraRotation;
				MuzzleRotation.Pitch += 10.f; // 조준을 약간 윗쪽으로 올려줍니다.
				UWorld* const World = GetWorld();
				if (World != NULL)
				{
					FActorSpawnParameters SpawnParams;
					SpawnParams.Owner = this;
					SpawnParams.Instigator = Instigator;
					// 총구 위치에 발사체를 스폰시킵니다.
					AFPSProjectile* const Projectile = World->SpawnActor<AFPSProjectile>(ProjectileClass, MuzzleLocation, MuzzleRotation, SpawnParams);
					if (Projectile != NULL)
					{
						// 발사 방향을 알아냅니다.
						FVector const LaunchDirection = MuzzleRotation.Vector();
						Projectile->InitVelocity(LaunchDirection);
					}
				}
			}
		}

1.	Visual Studio 에서 `FPSCharacter.cpp` 를 저장합니다.

1.	**Solution Explorer** 에서 **FPSProject** 를 찾습니다.

1.	**FPSProject** 에 우클릭하고 **Build** 를 선택하여 프로젝트를 컴파일합니다.

	![](BuildFPSProject.png)

## 프로젝타일 블루프린트 빌드하기

[REGION:note]
계속하기 전, 다음 링크에서 샘플 메시를 다운로드하고 압축을 풉니다:
["프로젝타일 메시"](Sphere.zip "프로젝타일 메시")
[/REGION]

1.	콘텐츠 브라우저의 파일 박스 안에서 우클릭하여 **애셋 임포트** 대화창을 엽니다.

1.	**/Game... 에 임포트** 를 클릭하여 **임포트** 대화창을 엽니다.

	![](RightClickImport.png)

1.	**Sphere.fbx** 메시 파일을 찾아 선택합니다.

1.	**열기** 를 클릭하여 프로젝트에 메시 임포트를 시작합니다.

1.	**콘텐츠 브라우저** 에서 **FBX 임포트 옵션** 대화창이 뜹니다. **임포트** 를 클릭하면 프로젝트에 메시가 추가됩니다.

	[REGION:warning]
	다음 스무딩 그룹 관련 오류는 무시합니다:
	![](FBXWarning.png)  
	이 메시는 여전히 일인칭 메시 구성을 나타내며, 나중의 섹션에서 애니메이션 작업시 사용할 것입니다.
	[/REGION]

1.	**저장** 버튼을 클릭하여 임포트된 스태틱 메시를 저장합니다.

1.	**콘텐츠 브라우저** 에서 **Blueprints** 폴더로 돌아갑니다.

1.	**신규 추가** 버튼을 클릭하고 **블루프린트 클래스** 를 선택합니다.

	![](AddNewBPClass.png)

1.	**모든 클래스** 드롭다운 메뉴를 펼친 다음 검색창에 FPSProjectile 이라 입력합니다.

	![](AddNewBPClass.png)

1.	**FPSCharacter** 를 클릭한 다음 **선택** 을 누릅니다.

1.	새 블루프린트 이름을 BP_FPSProjectile 라 합니다.

	![](NameBP_FPSProjectile.png)

1.	 **BP_FPSCharacter** 아이콘을 더블클릭하여 **블루프린트 에디터** 에서 엽니다.

1.	**컴포넌트** 탭에서 **CollisionComp** 에 클릭합니다.

1.	**컴포넌트 추가** 드롭다운 목록에 클릭한 다음 **스태틱 메시** 를 선택합니다.

	![](AddStaticMeshComponent.png)

1.	새 컴포넌트 이름을 ProjectileMesh 라 합니다.

	![](NameProjectileMeshComponent.png)

1.	**디테일** 탭의 **Mesh** 섹션으로 스크롤해 내려간 다음 '없음'이라 되어있는 드롭다운 메뉴를 클릭합니다.

1.	**Sphere** 스태틱 메시를 선택합니다.

	![](SelectSphereMesh.png)

	[REGION:note]
	참고로 멀티플레이어 게임을 만드는 경우, MovementComp 컴포넌트의 Initial Velocity in Local Space (로컬 스페이스의 초기 속도) 옵션 체크를 해제해 줘야 이 발사체가 서버에 제대로 리플리케이트됩니다.
	[/REGION]

1.	X, Y, Z 스케일 값을 0.09 로 설정합니다.

	[REGION:note]
	자물쇠 아이콘을 클릭하면 세 축 모두 고정시켜 상대 비율이 유지됩니다.
	[/REGION]

1.	**ProjectileMesh** 의 **콜리전 프리셋** 값을 **NoCollision** 으로 설정합니다 (콜리전에 이 스태틱 메시가 아닌 SphereComponent 를 사용하기 때문입니다).

	![](SetCollisionPresets.png)
	
1.	블루프린트를 **컴파일**, **저장** 후 **블루프린트 에디터** 를 닫습니다.

1.	**BP_FPSCharacter** 에 더블클릭하여 캐릭터 블루프린트를 편집용으로 엽니다.

1.	**디폴트 모드** 를 엽니다.

1.	**Projectile Class** 프로퍼티를 찾은 다음 **BP_FPSProjectile** 로 설정합니다+.

1.	**MuzzleOffset** 프로퍼티를 {100, 0, 00} 로 설정하여 발사체를 카메라 약간 앞에 스폰시킵니다.

	![](CharacterProjectileClass.png)

1.	블루프린트를 **컴파일**, **저장** 후 **블루프린트 에디터** 를 닫습니다.

## 게임내 발사체 발사

1.	**레벨 에디터 툴바** 의 **플레이** 버튼을 클릭하여 게임내에서 발사체를 발사해 봅니다.

1.	**좌클릭** 하면 발사체가 월드로 발사됩니다.

	![](FiringProjectiles.png)

1.	레벨 에디터의 **중지** 버튼을 클릭하여 에디터에서 플레이 (PIE) 모드를 빠져나갑니다.

%Steps%