INTSourceChangelist:2672916
Availability:Docs
Title:3.1 - ゲームに発射物を追加する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description:First Person Shooter プロジェクトに発射物を追加する方法を学びます。
SkillLevel:初心者向け
Version:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/3/2)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

キャラクターの設定が完了したので、簡易な射出武器を実装してみましょう。武器の発射時に手榴弾のような発射物をスクリーン中央から投射し、ワールドに衝突するまでこれを飛ばしてみましょう。このステップでは、入力を追加し、発射物に新規コード クラスを追加します。

## Fire Action Mapping を追加する

1.	**[Edit (編集)]** メニューで、**[Project Settings (プロジェクト設定)]** を **クリック** します。

1.	**[Project Settings]** タブの左側にある **[Engine]** の見出しで、**[Input]** を **クリック** します。

1.	**[Bindings]** の **[Action Mappings]** の隣にあるプラス記号をクリックします。

1.	**[Axis Mappings]** の左側にある矢印を **クリック** します。

1.	表示されるテキスト欄に "Fire" と入力し、テキスト ボックスの左側の矢印をクリックしてアクション結合オプションを展開します。

1.	ドロップダウン メニューで **[Mouse]** ドロップダウン リストから **Left Mouse Button** を選択します。

1.	入力設定は以下のようになります。

	![](ActionMapping.png)

1.	**[Project Settings]** メニューを閉じます。

## Projectile クラスを追加する

1.	ファイル メニューで **[New C++ Class... (新規 C++ クラス)]** を選択して、新しい Parent (親) クラスを選択します。

1.	**[Choose Parent Class (親クラスを選択)]** メニューが開きます。下方にスクロールして、親クラスとして **[Actor]** を選択して、**[Next] をクリック** します。

	![](AddProjectileClass.png)

1.	新しいクラスに 「FPSProjectile」 と名前を付けて、 **[Create]** をクリックします。

	![](CreateProjectileClass.png)

## USphere コンポーネントを追加する

1.	**Solution Explorer** で、`FPSProjectile` クラスを探して、 `FPSProjectile.h` を開きます。

1.	`FPSProjectile` インターフェースで、.`USphereComponent` への参照を追加します。

		// Sphere collision コンポーネント
		UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
		USphereComponent* CollisionComp;

1.	以下のコンストラクタを `FPSProjectile.h` に追加します。

		// 簡易なコリジョン表現として球体を追加するためのコンストラクタ
		AFPSProjectile(const FObjectInitializer& ObjectInitializer);

1.	`FPSProjectile.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Actor.h"

		#include "FPSProjectile.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()
			public:

			// このアクタのプロパティのデフォルト値を設定します。
			AFPSProjectile();
		// 簡易なコリジョン表現として球体を追加するためのコンストラクタ

			AFPSProjectile(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// Sphere collision コンポーネント

			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComp;
		};

1.	**Solution Explorer** で、`FPSProjectile` クラスを探して、 `FPSProjectile.cpp` を開きます。

1.	次のコードを `FPSProjectile.cpp` に追加します。

		// コンストラクタ
		AFPSProjectile::AFPSProjectile(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// 簡易なコリジョン表現に球体を使用
			CollisionComp = ObjectInitializer.CreateDefaultSubobject<USphereComponent>(this, TEXT("SphereComp"));
		if (CollisionComp != NULL)

			{
				CollisionComp->InitSphereRadius(15.f);
				RootComponent = CollisionComp;
			}
		}

	[REGION:note]
	シミュレーションで動かすため、`CollisionComponent` を `RootComponent` にします。
	[/REGION]

1. `FPSProjectile.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSProjectile.h"
		// デフォルト値を設定

		AFPSProjectile::AFPSProjectile()
		{
		 	// フレーム毎に Tick() を呼び出すようにこのアクタを設定。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// コンストラクタ

		AFPSProjectile::AFPSProjectile(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// 簡易なコリジョン表現に球体を使用
			CollisionComp = ObjectInitializer.CreateDefaultSubobject<USphereComponent>(this, TEXT("SphereComp"));
		if (CollisionComp != NULL)

			{
				CollisionComp->InitSphereRadius(15.f);
				RootComponent = CollisionComp;
			}
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();
			}

		// フレームごとに呼ばれます。

		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}


## Projectile Movement  コンポーネントを追加する

1.	**Solution Explorer** で、`FPSProjectile` クラス インターフェースを探して、 `FPSProjectile.h` を開きます。

1.	以下の public な参照を `FPSProjectile.h` に追加します。

		// Projectile Movement コンポーネント
		UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movement)
		UProjectileMovementComponent* ProjectileMovement;

1.	`FPSProjectile.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Actor.h"

		#include "FPSProjectile.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()
			public:

			// このアクタのプロパティのデフォルト値を設定します。
			AFPSProjectile();
		// 簡易なコリジョン表現として球体を追加するためのコンストラクタ

			AFPSProjectile(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// Sphere collision コンポーネント

			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComp;
		// Projectile Movement コンポーネント

			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movement)
			UProjectileMovementComponent* ProjectileMovement;
		};

1.	**Solution Explorer** で、`FPSProjectile` クラスを探して、 `FPSProjectile.cpp` を開きます。

1.	以下のコードの行を、`FPSProjectile.cpp` 内の `FPSProjectile` コンストラクタに追加します。

		// この発射物の動作管理に ProjectileMovement コンポーネントを利用します。
		ProjectileMovement = ObjectInitializer.CreateDefaultSubobject<UProjectileMovementComponent>(this, TEXT("ProjectileComp"));

		if (ProjectileMovement != NULL)
		{
			ProjectileMovement->UpdatedComponent = CollisionComp;
			ProjectileMovement->InitialSpeed = 3000.f;
			ProjectileMovement->MaxSpeed = 3000.f;
			ProjectileMovement->bRotationFollowsVelocity = true;
			ProjectileMovement->bShouldBounce = true;
			ProjectileMovement->Bounciness = 0.3f;
		}

1.	`FPSProjectile.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSProjectile.h"
		// デフォルト値を設定

		AFPSProjectile::AFPSProjectile()
		{
		 	// フレーム毎に Tick() を呼び出すようにこのアクタを設定。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// コンストラクタ

		AFPSProjectile::AFPSProjectile(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// 簡易なコリジョン表現に球体を使用
			CollisionComp = ObjectInitializer.CreateDefaultSubobject<USphereComponent>(this, TEXT("SphereComp"));
		if (CollisionComp != NULL)

			{
				CollisionComp->InitSphereRadius(15.f);
				RootComponent = CollisionComp;
		// この発射物の動作管理に ProjectileMovement コンポーネントを利用します。

				ProjectileMovement = ObjectInitializer.CreateDefaultSubobject<UProjectileMovementComponent>(this, TEXT("ProjectileComp"));
		if (ProjectileMovement != NULL)

				{
					ProjectileMovement->UpdatedComponent = CollisionComp;
					ProjectileMovement->InitialSpeed = 3000.f;
					ProjectileMovement->MaxSpeed = 3000.f;
					ProjectileMovement->bRotationFollowsVelocity = true;
					ProjectileMovement->bShouldBounce = true;
					ProjectileMovement->Bounciness = 0.3f;
				}
			}
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();
			}

		// フレームごとに呼ばれます。

		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}


## 発射物の初期べロシティ（方向付き速度）を設定する

1.	**Solution Explorer** で、`FPSProjectile` クラス インターフェースを探して、 `FPSProjectile.h` を開きます。

1.	`FPSProjectile.h` に以下の関数の宣言を追加します。

		// 発射方向の発射物のべロシティを初期化します。
		void InitVelocity(const FVector& ShootDirection);

	[REGION:note]
	前述のコードは、発射物を発射する関数のための宣言です。
	[/REGION]

1.	`FPSProjectile.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Actor.h"

		#include "FPSProjectile.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()
			public:

			// このアクタのプロパティのデフォルト値を設定します。
			AFPSProjectile();
		// 簡易なコリジョン表現として球体を追加するためのコンストラクタ

			AFPSProjectile(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 発射方向の発射物のべロシティを初期化します。

			void InitVelocity(const FVector& ShootDirection);
		// Sphere collision コンポーネント

			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComp;
		// Projectile Movement コンポーネント

			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movement)
			UProjectileMovementComponent* ProjectileMovement;
		};

1.	**Solution Explorer** で、`FPSProjectile` クラスを探して、 `FPSProjectile.cpp` を開きます。

1.	以下のコードの行を、`FPSProjectile.cpp` 内の `FPSProjectile` コンストラクタに追加します。

		// 発射方向の発射物のべロシティを初期化します。
		void AFPSProjectile::InitVelocity(const FVector& ShootDirection)
		{
			if (ProjectileMovement != NULL)
			{
				// 発射物のベロシティを希望する方向へ設定します。
				ProjectileMovement->Velocity = ShootDirection * ProjectileMovement->Speed;
			}
		}

	[REGION:note]
	プロジェクタイルの速度は `ProjectileMovementComponent` によって定義されているため、指定するのは発射方向だけです。
	[/REGION]

1.	`FPSProjectile.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSProjectile.h"
		// デフォルト値を設定

		AFPSProjectile::AFPSProjectile()
		{
		 	// フレーム毎に Tick() を呼び出すようにこのアクタを設定。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// コンストラクタ

		AFPSProjectile::AFPSProjectile(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// 簡易なコリジョン表現に球体を使用
			CollisionComp = ObjectInitializer.CreateDefaultSubobject<USphereComponent>(this, TEXT("SphereComp"));
		if (CollisionComp != NULL)

			{
				CollisionComp->InitSphereRadius(15.f);
				RootComponent = CollisionComp;
		// この発射物の動作管理に ProjectileMovement コンポーネントを利用します。

				ProjectileMovement = ObjectInitializer.CreateDefaultSubobject<UProjectileMovementComponent>(this, TEXT("ProjectileComp"));
		if (ProjectileMovement != NULL)

				{
					ProjectileMovement->UpdatedComponent = CollisionComp;
					ProjectileMovement->InitialSpeed = 3000.f;
					ProjectileMovement->MaxSpeed = 3000.f;
					ProjectileMovement->bRotationFollowsVelocity = true;
					ProjectileMovement->bShouldBounce = true;
					ProjectileMovement->Bounciness = 0.3f;
				}
			}
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();
			}

		// フレームごとに呼ばれます。

		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 発射方向の発射物のべロシティを初期化します。

		void AFPSProjectile::InitVelocity(const FVector& ShootDirection)
		{
			if (ProjectileMovement != NULL)
			{
				// 発射物のベロシティを希望する方向へ設定します。
				ProjectileMovement->Velocity = ShootDirection * ProjectileMovement->Speed;
			}
		}

## Fire 入力アクションをバインドする

1.	**Solution Explorer** で、`FPSCharacter` クラス インターフェースを探して、`FPSCharacter.h` を開きます。

1.	`FPSProjectile.h` に以下の関数の宣言を追加します。

		// 発行処理
		UFUNCTION()
		void OnFire();

1.	`FPSCharacter.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// このキャラクターのプロパティのデフォルト値を設定
			AFPSCharacter();
		// AFPSCharacter のコンストラクタ

			AFPSCharacter(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 機能と入力をバインドするために呼ばれます。

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// 前後方向の移動を処理します。

			UFUNCTION()
			void MoveForward(float Value);
		// 左右の移動を処理します。

			UFUNCTION()
			void MoveRight(float Value);
		// キー押下時のジャンプフラグを設定

			UFUNCTION()
			void OnStartJump();
			//キー解放時のジャンプフラグをクリア

			UFUNCTION()
			void OnStopJump();
		// 発行処理

			UFUNCTION()
			void OnFire();
		// FPS カメラ

			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera)
			UCameraComponent* FirstPersonCameraComponent;
		// Pawn Mesh:一人称視点 (自分からだけ見える腕)

			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FirstPersonMesh;
		};

1.	**Solution Explorer** で、`FPSCharacter` クラス実装ファイルを探して、`FPSCharacter.cpp` を開きます。

1.	 `FPSCharacter.cpp` で以下を `SetupPlayerInputComponent` に追加して `OnFire` 関数をバインドします。

		// 銃の発砲アクションのバインディングをセットアップします。
		InputComponent->BindAction("Fire", IE_Pressed, this, &AFPSCharacter::OnFire);

1.	`FPSCharacter.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		// デフォルト値を設定

		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// camera コンポーネントを作成するコンストラクタ

		AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// Camera コンポーネントを作成
			FirstPersonCameraComponent = ObjectInitializer.CreateDefaultSubobject<UCameraComponent>(this, TEXT("FirstPersonCamera"));
		if (FirstPersonCameraComponent != NULL)

			{
				FirstPersonCameraComponent->AttachParent = GetCapsuleComponent();
				// 目の高さより少し上にカメラを設定
				FirstPersonCameraComponent->RelativeLocation = FVector(0.f, 0.f, 50.f + BaseEyeHeight);
				// ポーンが回転を制御できるようにします。
				FirstPersonCameraComponent->bUsePawnControlRotation = true;
			}
		// このポーンの制御時、一人称視点で見ている時に使用されるメッシュコンポーネントを作成。

			FirstPersonMesh = ObjectInitializer.CreateDefaultSubobject<USkeletalMeshComponent>(this, TEXT("FirstPersonMesh"));
		if (FirstPersonMesh != NULL)

			{
				FirstPersonMesh->SetOnlyOwnerSee(true);// このメッシュは所有しているプレイヤーだけから見えます。
				FirstPersonMesh->AttachParent = FirstPersonCameraComponent;
				bPressedJump = false;
				FirstPersonMesh->CastShadow = false;
			}
		// オーナー以外は誰でも通常のボディメッシュを見ることができます。

			GetMesh()->SetOwnerNoSee(true);
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		// フレームごとに呼ばれます。

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 機能と入力をバインドするために呼ばれます。

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			// ゲームプレイのキーバインドをセットアップ

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
			// ゲームプレイのマウス バインドのセットアップ
			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
			// ジャンプ アクションのバインドのセットアップ。
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
			// 銃の発砲アクションのバインディングをセットアップします。
			InputComponent->BindAction("Fire", IE_Pressed, this, &AFPSCharacter::OnFire);
		}
		//前方向の移動の関数の定義

		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 前進方向の確認
				FRotator Rotation = Controller->GetControlRotation();
				// 歩行または落下時のピッチ (上下動) の制限
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				// その方向へ動きを追加
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}
		//右移動の関数の定義

		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 右方向の確認
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				// その方向へ動きを追加
				AddMovementInput(Direction, Value);
			}
		}
		//ジャンプ フラグを設定する関数

		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		//ジャンプ フラグをクリアする関数

		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}

## 発射物のスポーンを定義する

1.	`FPSProjectile` アクタをスポーンする場合、`OnFire` 関数を実装する場合に考慮すべきポイントが以下のように 2 つあります。

*	発射物をスポーンする位置
*	projectile クラス ( `FPSCharacter` とその派生ブループリントがどの発射物をスポーンするかをわかるようにするため)

[REGION:note]
カメラ空間のオフセット ベクターを使用してスポーン位置を決めます。このパラメータを編集可能にして、BP_FPSCharacter ブループリントで設置および微調整ができるようにします。このデータに基づいて、発射物の初期位置を計算します。
[/REGION]

1.	**Solution Explorer** で、`FPSCharacter` クラス インターフェースを探して、`FPSCharacter.h` を開きます。

1.	次のコードを `FPSCharacter.h` に追加します。

		//  カメラ位置から銃口のオフセット 
		UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Gameplay)
		FVector MuzzleOffset;

	[REGION:note]
	EditAnywhere 指定子は、ブループリントエディタの [Defaults] モード、またはキャラクターの任意のインスタンスの [Details] タブから銃口のオフセットの値の変更することができます。BlueprintReadWrite 指定子は、ブループリント内で銃口のオフセッの値の取得および設定をできるようにします。
	[/REGION]

1.	次のコードを `FPSCharacter.h` に追加します。

		// スポーンする Projectile クラス
		UPROPERTY(EditDefaultsOnly, Category = Projectile)
		TSubclassOf<class AFPSProjectile> ProjectileClass;

	[REGION:note]
	EditDefaultsOnly 指定子では、ブループリントの各インスタンスではなく、ブループリントのデフォルトとして projectile クラスを設定できます。
	[/REGION]

1.	`FPSCharacter.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// このキャラクターのプロパティのデフォルト値を設定
			AFPSCharacter();
		// AFPSCharacter のコンストラクタ

			AFPSCharacter(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 機能と入力をバインドするために呼ばれます。

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// 前後方向の移動を処理します。

			UFUNCTION()
			void MoveForward(float Value);
		// 左右の移動を処理します。

			UFUNCTION()
			void MoveRight(float Value);
		// キー押下時のジャンプフラグを設定

			UFUNCTION()
			void OnStartJump();
			//キー解放時のジャンプフラグをクリア

			UFUNCTION()
			void OnStopJump();
		// 発行処理

			UFUNCTION()
			void OnFire();
		// FPS カメラ

			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera)
			UCameraComponent* FirstPersonCameraComponent;
		// Pawn Mesh:一人称視点 (自分からだけ見える腕)

			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FirstPersonMesh;
		//  カメラ位置から銃口のオフセット 

			UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Gameplay)
			FVector MuzzleOffset;
		// スポーンする Projectile クラス

			UPROPERTY(EditDefaultsOnly, Category = Projectile)
			TSubclassOf<class AFPSProjectile> ProjectileClass;
		};

## コードのコンパイルとチェック

新規で実装した発射物のコードをコンパイルし、テストします。

1.	Visual Studio にすべてのインターフェースと実装のファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildFPSProject.png)

	[REGION:note]
	このステップの目的は、次のステップに進む前にビルド エラーがあれば見つけることです。
	[/REGION]

%Steps%