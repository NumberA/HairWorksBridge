INTSourceChangelist:2672917
Availability: Docs
Title: 2.7 - 카메라 뷰 변경
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description: 일인칭 슈팅 캐릭터의 카메라 뷰 변경법을 배워봅니다.
SkillLevel: Beginner
Version: 4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[예전 단계](Programming/Tutorials/FirstPersonShooter/2/6)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[섹션 홈](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[다음 단계](Programming/Tutorials/FirstPersonShooter/2/8)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

예전 단계 끝에서 기본 카메라 위치를 메시의 목 안쪽에 위치시켰었습니다. 이번 단계에서는 카메라 (위치나 시야같은) 프로퍼티 조정에 사용할 수 있는 적합한 FPS 카메라를 구성해 보도록 하겠습니다.

## 카메라 컴포넌트 붙이기

1.	Visual Studio 로 돌아와서 `FPSCharacter.h` 를 열고 다음 공용 프로퍼티를 추가합니다:

		// FPS 카메라
		UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera)
		UCameraComponent* FirstPersonCameraComponent;

1.	`FPSCharacter.h` 파일에 다음 생성자를 추가합니다:

		// AFPSCharacter 에 대한 생성자
		AFPSCharacter(const FObjectInitializer& ObjectInitializer);

1.	`FPSCharacter.h` 는 이제 다음과 같은 모습일 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#pragma once
		
		#include "GameFramework/Character.h"
		#include "FPSCharacter.generated.h"
		
		UCLASS()
		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		
		public:
			// 이 캐릭터 프로퍼티에 대한 기본값을 설정합니다.
			AFPSCharacter();
		
			// AFPSCharacter 에 대한 생성자입니다.
			AFPSCharacter(const FObjectInitializer& ObjectInitializer);
		
			// 게임 시작시 또는 스폰시 호출됩니다.
			virtual void BeginPlay() override;
			
			// 매 프레임 호출됩니다.
			virtual void Tick( float DeltaSeconds ) override;
		
			// 입력에 함수성을 바인딩하기 위해 호출됩니다.
			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		
			// 전후 이동을 처리합니다.
			UFUNCTION()
			void MoveForward(float Value);
		
			// 좌우 이동을 처리합니다.
			UFUNCTION()
			void MoveRight(float Value);
		
			// 키를 누르면 점프 플래그를 설정합니다.
			UFUNCTION()
			void OnStartJump();
			
			// 키를 떼면 점프 플래그를 지웁니다.
			UFUNCTION()
			void OnStopJump();
		
			// FPS 카메라
			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera)
			UCameraComponent* FirstPersonCameraComponent;
		};

1.	`FPSCharacter.cpp` 를 열고 다음 코드를 추가합니다:

		// 카메라 컴포넌트를 생성하는 생성자입니다.
		AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			// 카메라 컴포넌트를 생성합니다.
			FirstPersonCameraComponent = ObjectInitializer.CreateDefaultSubobject<UCameraComponent>(this, TEXT("FirstPersonCamera"));
		
			if (FirstPersonCameraComponent != NULL)
			{
				FirstPersonCameraComponent->AttachParent = GetCapsuleComponent();
			}
		}

	[REGION:note]
	앞서 언급한 코드는 `CameraComponent` 를 생성하여 `CapsuleComponent` 에 붙입니다.
	[/REGION]

1.	`AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer)` 에 다음 코드를 추가합니다:

		// 카메라 위치를 눈 약간 위로 조정합니다.
		FirstPersonCameraComponent->RelativeLocation = FVector(0.f, 0.f, 50.f + BaseEyeHeight);
		// 폰이 회전 제어를 가능하도록 합니다.
		FirstPersonCameraComponent->bUsePawnControlRotation = true;

	[REGION:note]
	앞서 언급한 코드는 카메라의 위치를 캐릭터의 눈 위치 살짝 위쪽으로 조정합니다.
	[/REGION]

1.	`FPSCharacter.cpp` 는 이제 다음과 같은 모습일 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSCharacter.h"
		
		
		// 기본값을 설정합니다.
		AFPSCharacter::AFPSCharacter()
		{
		 	// 이 캐릭터가 TIck() 을 매 프레임 호출하도록 설정합니다. 필요치 않은 경우 끄면 퍼포먼스가 향상됩니다.
			PrimaryActorTick.bCanEverTick = true;
		
		}
		
		// 카메라 컴포넌트를 생성하는 생성자입니다.
		AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			// 카메라 컴포넌트를 생성합니다.
			FirstPersonCameraComponent = ObjectInitializer.CreateDefaultSubobject<UCameraComponent>(this, TEXT("FirstPersonCamera"));
		
			if (FirstPersonCameraComponent != NULL)
			{
				FirstPersonCameraComponent->AttachParent = GetCapsuleComponent();
				// 카메라를 눈 약간 위쪽으로 위치시킵니다.
				FirstPersonCameraComponent->RelativeLocation = FVector(0.f, 0.f, 50.f + BaseEyeHeight);
				// 폰이 회전 제어를 가능하도록 합니다.
				FirstPersonCameraComponent->bUsePawnControlRotation = true;
			}
		}
		
		// 게임 시작시 또는 스폰시 호출됩니다.
		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		
		// 매 프레임 호출됩니다.
		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		
		}
		
		// 입력에 함수성을 바인딩하기 위해 호출됩니다.
		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			
			// 게임플레이 키 바인딩을 구성합니다.
			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
			// 게임플레이 마우스 바인딩을 구성합니다.
			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
			// 점프 동작 바인딩을 구성합니다.
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		}
		
		// 전방 이동 함수 정의입니다.
		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				//어디가 전방인지 알아냅니다.
				FRotator Rotation = Controller->GetControlRotation();
				//걸을 때 낙하를 대비해 핏치를 제한시킵니다.
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				//그 방향으로 동작을 더합니다.
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}
		
		//우측 이동 함수 정의입니다.
		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				//어디가 우측인지 알아냅니다.
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::Y);
				//그 방향으로 동작을 더합니다.
				AddMovementInput(Direction, Value);
			}
		}
		
		//점프 플래그를 설정하는 함수입니다.
		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		
		//점프 플래그를 지우는 함수입니다.
		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}

## 새 카메라 테스트

이제 새로 구현한 카메라 코드를 컴파일하고 테스트할 차례입니다.

1.	Visual Studio 에서 `FPSCharacter` 인터페이스 (\*.h) 및 구현 (\*.cpp) 파일을 저장합니다.

1.	**Solution Explorer** 에서 **FPSProject** 를 찾습니다.

1.	**FPSProject** 에 **우클릭** 하고 **Build** 를 선택하여 프로젝트를 컴파일합니다.

	![](BuildProject.png)

1.	빌드 완료 후 언리얼 에디터에서 **FPSProject** 를 엽니다.

1.	레벨 에디터 툴바의 **플레이** 버튼을 **클릭** 합니다. 카메라가 캐릭터 머리 위에 있어, 내려다 보면 캐릭터의 정수리를 볼 수 있을 것입니다.

	![](NewCameraComponent.png)

1.	레벨 에디터의 **중지** 버튼을 **클릭** 하여 에디터에서 플레이 (PIE) 모드를 빠져나갑니다.

%Steps%