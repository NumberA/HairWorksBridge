INTSourceChangelist:2672917
Availability:Docs
Title:2.6 - キャラクターにメッシュを追加する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description:First Person Shooter キャラクターにメッシュを追加する方法を学びます。
スキルレベル:初心者向け
バージョン：4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/2/5)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/2/7)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

このステップでは、キャラクターにスケルタルメッシュを適用します。`Character` クラスは、デフォルトで `SkeletalMeshComponent` オブジェクトを作成します。あとは使用する `SkeletalMesh` アセットがわかればいいだけです。

[REGION:note]
作業を開始する前に、次のリンクからサンプル メッシュをダウンロードし、抽出してください。
*	[Sample Mesh](GenericMale.zip "Sample Mesh")
[/REGION]

## スケルタルメッシュをインポートする

1.	コンテンツ ブラウザのファイル ボックス内で **右クリック** して **インポート アセット** ダイアログボックスを開きます。

1.	**'Import to /Game...' をクリック** して **[Import]** ダイアログボックスを開きます。

	![](RightClickImport.png)

1.	**GenericMale.fbx** メッシュ ファイルを探して選択します。

1.	プロジェクトへのメッシュのインポートを開始するには、**Open をクリック** します。

1.	**コンテンツ ブラウザ** に、**[FBX Import Options]** ダイアログ ボックスが表示されます。メッシュをプロジェクトに追加するには、**インポートをクリック** します。

1.	**[Save]** ボタンを **クリック** してインポートしたメッシュを保存します。

## FPS キャラクターのブループリントを作成する

1.	**コンテンツ ブラウザ** を右クリックして、 **[New Folder (新規フォルダ)]** を選択します。 

1.	このフォルダに「Blueprints」と名前を付けます。

1.	フォルダを開くにはその上で **ダブルクリック** します。

1.	 **[Add New]** ボタンをクリックして、**Blueprint クラス** を選択します。

	![](AddNewBPClass.png)

1.	**[All Classes]** ドロップダウン メニューを展開して、検索ボックスに "FPSCharacter" と入力します。

	![](AddFPSCharacterClass.png)

1.	**FPSCharacter** の上で **クリック** して、**[Select]** ボタンをクリックします。

1.	新しいブループリントに、 "BP_FPSCharacter" と名前を付けます。

	![](NameBP_FPSCharacter.png)

## Third Person Mesh をセットアップする

1. 	 **ブループリント エディタ** 内で **BP_FPSCharacter** のアイコンを **ダブルクリック** して開きます。

1.	**[Components]** タブで **Mesh** コンポーネントを **クリック** します。

	![](MeshComponent.png)

1.	**[Details (詳細)]** タブの **Mesh** セクションまで下にスクロールして、"None" と表示されているドロップダウン メニュー上で **クリック** します。

1.	**GenericMale** スケルタルメッシュを選択します。

	![](SelectSkeletalMesh.png)

1.	**[Details (詳細)]** タブで`SkeletalMeshComponent`の Z **Location** を 「-88」 に合わせることで、`SkeletalMeshComponent` を `CapsuleComponent` に位置合わせします。

	![](NewZLoc_Mesh.png)

	[REGION:note]
	**[Details]** タブで値を設定する代わりに、**[Preview Viewport (プレビュー ビューポート)]** からウィジットを使用してコンポーネントを移動させることもできます。
	[/REGION]

1.	`SkeletalMeshComponent` は以下に似たものになります。

	![](SkeletalMeshLocation.png)

	[REGION:note]
	一般的に、`ArrowComponent` がポイントしているのと同じ方向を向いて、`CapsuleComponent` 内に `SkeletalMeshComponent` が入るようにしてください。こうすることで、ワールドでキャラクターが正しく動くようにします。
	[/REGION]

1. 	 **BP_FPSCharacter** ブループリントを **Compile (コンパイル)** および **Save (保存)** してから、**ブループリント エディタ** を閉じてください。

## デフォルトの Pawn クラスを設定する

1.	Visual Studio に切り替えて、`FPSGameMode.cpp` を開きます。

1.	`FPSGameMode.cpp` で `FPSGameMode` コンストラクタを探して、以下の既存の `DefaultPawnClass` 代入を見つけます。

		DefaultPawnClass = AFPSCharacter::StaticClass();

1.	この `DefaultPawnClass` 代入を以下のコードに置き換えます。

		// ブループリントで作成したキャラクターにデフォルトのポーンクラスを設定
		static ConstructorHelpers::FClassFinder<APawn> PlayerPawnObject(TEXT("Pawn'/Game/Blueprints/BP_FPSCharacter.BP_FPSCharacter_C'"));
		if (PlayerPawnObject.Object != NULL)
		{
			DefaultPawnClass = PlayerPawnObject.Class;
		}

	[REGION:note]
	このコードはブループリントで生成されたクラスを見つけてそれをデフォルト ポーン クラスとして代入します。このアセット パスの "_C" の接尾辞は、ゲームが使用する実際のクラスとブループリントのアセットとを区別しています。アセットツリー内の別のフォルダへブループリントを格納した場合、コンテンツ ブラウザでアセットを右クリックして [Copy Reference] を選択すると、フルパスを取得できます。
	![](CopyAssetReference.png)
	[/REGION]

1.	この時点で `#include "FPSCharacter.h"` を `FPSGameMode.cpp` から取り除くことができます。`FPSGameMode.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSGameMode.h"
		AFPSGameMode::AFPSGameMode(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)

		{
			// ブループリントで作成したキャラクターにデフォルトのポーンクラスを設定
			static ConstructorHelpers::FClassFinder<APawn> PlayerPawnObject(TEXT("Pawn'/Game/Blueprints/BP_FPSCharacter.BP_FPSCharacter_C'"));
			if (PlayerPawnObject.Object != NULL)
			{
				DefaultPawnClass = PlayerPawnObject.Class;
			}
		}//AFPSGameMode Constructor
		void AFPSGameMode::StartPlay()

		{
			Super::StartPlay();
		StartMatch();

		if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Yellow, TEXT("We are using FPSGameMode."));
			}
		}//StartPlay()

## PIE モードで新しいメッシュを確認する

新規追加したメッシュをエディタ内でコンパイルし、テストします。

1.	`FPCSGameMode.cpp` を Visual Studio に保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildProject.png)

1.	ビルドが終了したらアンリアル エディタでご自身の **FPSProject** を開きます。

1.	レベル エディタのツールバーで、**[Play (再生)]** ボタンを **クリック** します。移動するにつれて、キャラクターのシャドウが表示されるはずです。

	[REGION:note]
	カメラを自由に動かしてキャラクターのメッシュを見るには、F1 を押してマウス カーソルを再びコントロールできるようにしてから、ツールバーで **[Eject]** ボタンを **クリック** します。
	![](FreelyMovingCamera.png)
	[/REGION]

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで **[Stop]** ボタンを **クリック** します。

%Steps%