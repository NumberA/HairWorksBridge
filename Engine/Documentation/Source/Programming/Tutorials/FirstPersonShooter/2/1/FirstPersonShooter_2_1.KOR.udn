INTSourceChangelist:2672917
Availability: Docs
Title: 2.1 - 새 캐릭터 만들기
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description: 일인칭 슈팅 프로젝트에 새 캐릭터를 만드는 법을 배워봅니다.
SkillLevel: Beginner
Version: 4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[섹션 홈](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[다음 단계](Programming/Tutorials/FirstPersonShooter/2/2)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

이번 단계에서는 엔진의 Character 베이스 클래스를 사용하여 새 캐릭터를 만들어 보겠습니다. (Pawn 클래스에서 파생된) Character 클래스에는 걷기, 달리기, 점프와 같은 이족보행 동작이 기본 내장되어 있습니다.

[REGION:note]
Visual Studio 솔루션에 \*.h 와 \*.cpp 파일을 수동 추가할 수는 있지만, C++ 클래스 마법사를 사용해서 프로젝트에 새 클래스를 추가하는 것도 좋은 방법입니다. C++ 클래스 마법사를 사용하면, 엔진에서는 언리얼 전용 매크로를 알아서 구성해 주는 헤더와 소스 템플릿이 생성됩니다.
[/REGION]

## 캐릭터 클래스 추가

1.	파일 메뉴에서 **새 C++ 클래스...** 를 선택하여 새 부모 클래스를 선택합니다.

1.	**부모 클래스 선택** 메뉴가 열립니다. 스크롤해 내려가 **Character** 를 부모로 선택하고 **다음** 을 클릭합니다.

	![](ChooseCharacterClass.png)

1.	새 클래스 이름을 "FPSCharacter" 라 한 다음 **생성** 을 클릭합니다.

	![](MakeFPSCharacterClass.png)

	[REGION:note]
	FPSCharacter 클래스를 생성했으니, **Visual Studio** 로 전환하여 새로 생성된 클래스에 코드를 추가하면 됩니다. `FPSCharacter.h` 와 `FPSCharacter.cpp` 가 열리며, **언리얼 엔진** 에서는 새로운 클래스를 자동으로 컴파일하여 코드를 리로드해 줍니다.
	[/REGION]

## 게임 모드 클래스 편집

먼저 게임플레이가 시작되면 FPSCharacter 가 기본 폰으로 사용되도록 **GameMode** 를 편집해 줘야합니다.

1.	**Solution Explorer** 에서 **FPSProject > Source > FPSProject** 를 펼칩니다.

	![](ExpandedSolutionExplorer.png)

1.	`FPSGameMode.cpp` 를 **더블클릭** 하여 **FPSGameMode** 클래스에 대한 구현 파일을 엽니다.

1.	먼저, `FPSGameMode.cpp` 상단에 `FPSCharacter` 헤더를 포함(include)시킵니다:

		#include "FPSCharacter.h"

1.	이제, `AFPSGameMode` 생성자에 다음 줄을 추가합니다:

		DefaultPawnClass = AFPSCharacter::StaticClass();

1.	`FPSGameMode.cpp` 가 다음과 같아 보일 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSGameMode.h"
		#include "FPSCharacter.h"
		
		AFPSGameMode::AFPSGameMode(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
		{
			DefaultPawnClass = AFPSCharacter::StaticClass();
		}//AFPSGameMode 생성자
		
		void AFPSGameMode::StartPlay()
		{
			Super::StartPlay();
		
			StartMatch();
		
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Yellow, TEXT("We are using FPSGameMode."));
			}
		}//StartPlay()

1.	Visual Studio 에서 `FPSGameMode.cpp` 구현 파일을 저장합니다.

## 캐릭터 클래스 확인

1.	**Solution Explorer** 에서 **FPSProject > Source > FPSProject** 를 펼칩니다.

	![](ExpandedSolutionExplorer.png)

1.	`FPSCharacter.cpp` 를 **더블클릭** 하여 **FPSCharacter** 클래스에 대한 구현 파일을 엽니다.

1.	`BeginPlay()` 함수에 다음 코드줄을 추가하여 `FPSCharacter` 클래스가 사용중인지 확인합니다:

		if(GEngine != nullptr)
		{
			GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
		}

1.	`FPSCharacter.cpp` 는 다음과 같은 모습일 것입니다:

		// 프로젝트 세팅의 설명 페이지에 저작권 문구를 채우세요.
		
		#include "FPSProject.h"
		#include "FPSCharacter.h"
		
		// 기본값 살정
		AFPSCharacter::AFPSCharacter()
		{
		 	// 매 프레임 Tick() 호출을 위해 이 캐릭터를 설정합니다. 필요치 않은 경우 꺼 주면 퍼포먼스가 향상됩니다.
			PrimaryActorTick.bCanEverTick = true;
		
		}
		
		// 게임 시작시 또는 스폰시 호출됩니다.
		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		
		// 매 프레임 호출됩니다.
		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		
		}
		
		// 입력을 위한 함수성 바인딩을 위해 호출됩니다.
		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
		
		}

1.	Visual Studio 에서 `FPSCharacter` 구현 파일을 저장합니다.

1.	**Solution Explorer** 에서 **FPSProject** 를 찾습니다.

1.	**FPSProject** 에 **우클릭** 한 다음 **Build** 를 눌러 프로젝트를 컴파일합니다.

	![](BuildProject.png)

1.	빌드가 끝난 후 언리얼 에디터를 열어 새로 컴파일된 **FPSCharacter** 클래스가 **콘텐츠 브라우저** 에 보이는지 확인합니다.

	![](FPSCharacterContentBrowser.png)

1.	레벨 에디터 툴바의 **플레이** 버튼을 **클릭** 합니다. 뷰포트 좌상단 구석에 "We are using FPSGameMode." 라고 보일 것입니다.

	![](VerifyingFPSCharacterResult.png)

	[REGION:note]
	새 캐릭터에 아직 조작 콘트롤이 없으므로 레벨에서 움직일 수는 없을 것입니다. 움직일 수 없다면, FPSCharacter 가 폰으로 제대로 사용되고 있는 것입니다!
	[/REGION]

1.	레벨 에디터의 **중지** 버튼을 눌러 에디터에서 플레이(PIE) 모드를 빠져나갑니다.

%Steps%