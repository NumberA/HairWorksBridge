INTSourceChangelist:2672917
Availability:Docs
Title:2.3- キャラクターの Movement 関数を実装する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description:First Person Shooter キャラクターの Movement 関数の実装方法を学びます。
スキルレベル:初心者向け
バージョン：4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/2/2)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]	
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/2/4)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

このステップでは、Player Input コンポーネントをセットアップし、以下の関数を `FPSCharacter`クラスに実装します。

*	`MoveForward`
*	`MoveRight`

`FPSCharacter` の軸マッピングをセットアップしたので、Visual Studio でご自身のプロジェクトに切り替えることができます。

## Movement 関数のインターフェース

1.	 `FPSCharacter.h` で、以下の関数の宣言を`SetupPlayerInputComponent` の下に追加します。

		// 前後方向の移動を処理します。
		UFUNCTION()
		void MoveForward(float Value);
		// 左右の移動を処理します。

		UFUNCTION()
		void MoveRight(float Value);

	[REGION:note]
	`UFUNCTION` マクロはこうした各関数の上で使用します。`UFUNCTION` マクロはそれ自体で、エンジンにこれらの関数を認識させ、関数をシリアライズ、最適化、またその他のエンジン機能に含めることができるようにします。
	[/REGION]

1.	`FPSCharacter.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// このキャラクターのプロパティのデフォルト値を設定
			AFPSCharacter::AFPSCharacter()
		// ゲーム開始時またはスポーン時に呼ばれます

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます

			virtual void Tick( float DeltaSeconds ) override;
		// 機能と入力をバインドするために呼ばれます

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// 前後方向の移動を処理します。

			UFUNCTION()
			void MoveForward(float Value);
		// 左右の移動を処理します。

			UFUNCTION()
			void MoveRight(float Value);
			};


## Movement 関数の実装

典型的な FPS 制御スキームでは、キャラクターの移動軸はカメラに対して相対的です。つまり、「forward (前方) 」の動きは「カメラが向いている方向」を意味し、「right (右) 」はカメラが向いている方向の右を意味します。`PlayerController` を使用してキャラクターの回転制御を取得します。上下方向を向いている間も地面に沿った動作になるように、`MoveForward` 関数は回転制御のピッチ コンポーネントを無視して、入力を XY プレーンに制限します。

1.	 `FPSCharacter.cpp` で、以下の行を`SetupPlayerInputComponent` 関数の `Super::SetupPlayerInputComponent(InputComponent)` に追加します

		// 機能と入力をバインドするために呼ばれます
		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			// ゲームプレイのキーバインドを設定

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
		}

	[REGION:note]
	`InputComponent` は、入力データの処理方法を定義するコンポーネントです。`InputComponent` は、入力を受けさせたいアクタにアタッチすることができます。
	[/REGION]

1.	以下の `MoveForward` 関数定義を `FPSCharacter.cpp` に追加します。

		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 前進方向の確認
				FRotator Rotation = Controller->GetControlRotation();
				// 落下のための歩行時のピッチ (上下動) の制限
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				// その方向へ動きを追加
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}

1.	以下の `MoveRight` 関数定義を `FPSCharacter.cpp` に追加します。

		//右移動の関数の定義
		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 右方向の確認
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				// その方向へ動きを追加
				AddMovementInput(Direction, Value);
			}
		}

1.	`FPSCharacter.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		// デフォルト値を設定

		AFPSCharacter::AFPSCharacter()
		{
		 	// このポーンがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// ゲーム開始時またはスポーン時に呼ばれます

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		// フレームごとに呼ばれます

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 機能と入力をバインドするために呼ばれます

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			// ゲームプレイのキーバインドを設定

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
		}
		//前方向の移動の関数の定義

		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 前進方向の確認
				FRotator Rotation = Controller->GetControlRotation();
				// 落下のための歩行時のピッチ (上下動) の制限
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				// その方向へ動きを追加
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}
		//右移動の関数の定義

		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 右方向の確認
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				// その方向へ動きを追加
				AddMovementInput(Direction, Value);
			}
		}

## キャラクターの移動のテスト

新規で実装したキャラクターの移動の関数をコンパイルし、テストします。

1.	Visual Studio に `FPSCharacter` interface (\*.h) と implementation (\*.cpp) ファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildProject.png)

1.	ビルドが終了したらアンリアル エディタでご自身の **FPSProject** を開きます。

1.	レベル エディタのツールバーで、**[Play (再生)]** ボタンを **クリック** します。マップ全体で移動、攻撃ができるようになるはずです (ただし、カメラは一定の位置で固定されます)。

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで **[Stop]** ボタンを **クリック** します。

%Steps%