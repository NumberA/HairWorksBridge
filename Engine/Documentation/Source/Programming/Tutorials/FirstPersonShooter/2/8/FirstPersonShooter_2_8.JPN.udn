INTSourceChangelist:2672917
Availability:Docs
Title:2.8 - First Person Mesh をキャラクターに追加する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description:First Person Shooter に一人称メッシュを追加する方法を学びます。
スキルレベル:初心者向け
バージョン：4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/2/7)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[次のセクション](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

ファーストパーソン シューティングゲーム (FPS) ゲームを構築する一般的な手法は、2 つの別個のキャラクター メッシュを使用するやり方です。ひとつは、ボディ全体のメッシュでもうひとつは「武器と手」のメッシュです。ボディ全体のメッシュは三人称視点でキャラクターを見るために使用されますが、これはプレイヤーが一人称視点でゲームを見ると非表示になります。「武器と手」のメッシュは通常カメラにアタッチされ、プレイヤーが一人称視点でマップを見ているときにのみ可視になります。

## 一人称キャラクターのメッシュを追加する

1.	Visual Studio に切り替えて、`FPSCharacter.h` を開き、以下のパブリック プロパティを追加します。

		// Pawn Mesh:一人称視点 (自分からだけ見える腕)
		UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
		USkeletalMeshComponent* FirstPersonMesh;

1.	`FPSCharacter.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// このキャラクターのプロパティのデフォルト値を設定
			AFPSCharacter();
		// AFPSCharacter のコンストラクタ

			AFPSCharacter(const FObjectInitializer& ObjectInitializer);
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 機能と入力をバインドするために呼ばれます。

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// 前後方向の移動を処理します。

			UFUNCTION()
			void MoveForward(float Value);
		// 左右の移動を処理します。

			UFUNCTION()
			void MoveRight(float Value);
		// キー押下時のジャンプフラグを設定

			UFUNCTION()
			void OnStartJump();
			//キー解放時のジャンプフラグをクリア

			UFUNCTION()
			void OnStopJump();
		// FPS カメラ

			UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera)
			UCameraComponent* FirstPersonCameraComponent;
		// Pawn Mesh:一人称視点 (自分からだけ見える腕)

			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FirstPersonMesh;
		};

1.	`FPSCharacter.cpp` を開いて次のコードを追加して、一人称メッシュを作成し設定します。

		// このポーンの制御時、一人称視点で見ている時に使用されるメッシュコンポーネントを作成。
		FirstPersonMesh = ObjectInitializer.CreateDefaultSubobject<USkeletalMeshComponent>(this, TEXT("FirstPersonMesh"));

		if (FirstPersonMesh != NULL)
		{
			FirstPersonMesh->SetOnlyOwnerSee(true);// このメッシュは所有しているプレイヤーだけから見えます。
			FirstPersonMesh->AttachParent = FirstPersonCameraComponent;
			bPressedJump = false;
			FirstPersonMesh->CastShadow = false;
		}

	[REGION:note]
	`SetOnlyOwnerSee` は、このメッシュがこの `Character` を所有した `PlayerController` からのみ可視であることを示しています。また、前述のコードはメッシュをカメラにアタッチし、一部の背景シャドウイングを無効にもします。カメラがアタッチされたアームがシャドウをキャストするようにすると、一人称キャラクターに対して単一のメッシュという錯覚が台無しになります。
	[/REGION]

1.	以下のコードを `FPSCharacter.cpp` に追加して既存の三人称メッシュを所有しているキャラクターから見えないようにします。

		// オーナー以外は誰でも通常のボディメッシュを見ることができます。
		GetMesh()->SetOwnerNoSee(true);

1.	`FPSCharacter.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		// デフォルト値を設定


		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// camera コンポーネントを作成するコンストラクタ

		AFPSCharacter::AFPSCharacter(const FObjectInitializer& ObjectInitializer) :Super(ObjectInitializer)
		{
			// Camera コンポーネントを作成
			FirstPersonCameraComponent = ObjectInitializer.CreateDefaultSubobject<UCameraComponent>(this, TEXT("FirstPersonCamera"));
		if (FirstPersonCameraComponent != NULL)

			{
				FirstPersonCameraComponent->AttachParent = GetCapsuleComponent();
				// 目の高さより少し上にカメラを設定
				FirstPersonCameraComponent->RelativeLocation = FVector(0.f, 0.f, 50.f + BaseEyeHeight);
				// ポーンが回転を制御できるようにします。
				FirstPersonCameraComponent->bUsePawnControlRotation = true;
			}
		// このポーンの制御時、一人称視点で見ている時に使用されるメッシュコンポーネントを作成。

			FirstPersonMesh = ObjectInitializer.CreateDefaultSubobject<USkeletalMeshComponent>(this, TEXT("FirstPersonMesh"));
		if (FirstPersonMesh != NULL)

			{
				FirstPersonMesh->SetOnlyOwnerSee(true);// このメッシュは所有しているプレイヤーだけから見えます。
				FirstPersonMesh->AttachParent = FirstPersonCameraComponent;
				bPressedJump = false;
				FirstPersonMesh->CastShadow = false;
			}
		// オーナー以外は誰でも通常のボディメッシュを見ることができます。

			GetMesh()->SetOwnerNoSee(true);
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, TEXT("We are using FPSCharacter."));
			}
		}
		// フレームごとに呼ばれます。

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 機能と入力をバインドするために呼ばれます。

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
			// ゲームプレイのキーバインドをセットアップ

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
			// ゲームプレイのマウス バインドのセットアップ
			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
			// ジャンプ アクションのバインドのセットアップ。
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		}
		//前方向の移動の関数の定義

		void AFPSCharacter::MoveForward(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 前進方向の確認
				FRotator Rotation = Controller->GetControlRotation();
				// 歩行または落下時のピッチ (上下動) の制限
				if (GetCharacterMovement()->IsMovingOnGround() || GetCharacterMovement()->IsFalling())
				{
					Rotation.Pitch = 0.f;
				}
				// その方向へ動きを追加
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				AddMovementInput(Direction, Value);
			}
		}
		//右移動の関数の定義

		void AFPSCharacter::MoveRight(float Value)
		{
			if (Controller != nullptr && Value != 0.f)
			{
				// 右方向の確認
				const FRotator Rotation = Controller->GetControlRotation();
				const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
				// その方向へ動きを追加
				AddMovementInput(Direction, Value);
			}
		}
		//ジャンプ フラグを設定する関数

		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		//ジャンプ フラグをクリアする関数

		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}

1.	Visual Studio に `FPSCharacter` interface (\*.h) と implementation (\*.cpp) ファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	[FPSProject] 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildProject.png)

1.	ビルドが終了したらアンリアル エディタでご自身の **FPSProject** を開きます。

## メッシュのブループリントを構築する

[REGION:note]
先に進む前に、次のリンクからサンプル メッシュをダウンロードし、抽出してください。
["First Person Skeletal Mesh"](HeroFPP.zip "First Person Skeletal Mesh")
[/REGION]

1.	コンテンツ ブラウザのファイル ボックス内で **右クリック** して **インポート アセット** ダイアログボックスを開きます。

1.	**'Import to /Game...' をクリック** して **[Import]** ダイアログボックスを開きます。

	![](RightClickImport.png)

1.	 **HeroFPP.fbx** メッシュ ファイルを探して選択します。

1.	プロジェクトへのメッシュのインポートを開始するには、**Open をクリック** します。

1.	**コンテンツ ブラウザ** に、**[FBX Import Options]** ダイアログ ボックスが表示されます。メッシュをプロジェクトに追加するには、**インポートをクリック** します。

	[REGION:warning]
	スムージング グループに関する以下のエラーは無視してください。
	![](FBXWarning.png)  
	このメッシュは一人称メッシュの設定を表していますが、この後のセクションで設定するアニメーションでも機能します。
	[/REGION]

1.	**[Save]** ボタンを **クリック** してインポートしたメッシュを保存します。

1.	**コンテンツ ブラウザ** の **Blueprints** フォルダに戻ります。

1. 	 **ブループリント エディタ** 内で **BP_FPSCharacter** のアイコンを **ダブルクリック** して開きます。

1.	**[Components]** タブで新しい **FirstPersonMesh** コンポーネントを探します。

	![](LocateFPSMeshComponent.png)

	[REGION:note]
	**FirstPersonMesh** コンポーネントは **FirstPersonCameraComponent** の子です。つまり、常にカメラにアタッチされます。
	[/REGION]

1.	**[Components]** メニューで **[FirstPersonMesh]** をクリックしてください。

1.	**[Details (詳細)]** タブの **Mesh** セクションまで下にスクロールして、"None" と表示されているドロップダウン メニュー上で **クリック** します。

	![](SelectHeroFPPSkeletalMesh.png)

1.	**HeroFPP** スケルタルメッシュを選択し、**ビューポート** に腕を追加します。

1.	新たに追加した **HeroFPP** スケルタルメッシュは、**ビューポート** 内で以下のように表示されます。

	![](HeroFPPMesh_Viewport.png)

1.	次のように設定して、この新たに追加したメッシュの変形がカメラの前にくるように調整します。その **Location** を {240, 0, 35} に、**Rotation** を {-180, 50, -180} に設定します。

	[REGION:lightbox]
		[![](AdjustingArmsTransform.png)(w:750)](AdjustingArmsTransform.png)
	[/REGION]
	_ズームインするには画像をクリックします。_

1. 	 **BP_FPSCharacter** ブループリントを **Compile (コンパイル)** および **Save (保存)** してから、**ブループリント エディタ** を閉じてください。

## 新しいメッシュをインゲームで見る

1.	**レベル エディタのツールバー** で、**[Play In]** ボタンを **クリック** します。

	[REGION:note]
	カメラを自由に動かしてキャラクターのメッシュを見るには、F1 を押してマウス カーソルを再びコントロールできるようにしてから、ツールバーで [Eject] ボタンを **クリック** します。
	![](FreeMovingCamera.png)
	[/REGION]

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで **[Stop]** ボタンを **クリック** します。

これで終わりです！以下について学習しました。

&#x2713; キャラクターの新規作成  
&#x2713; 軸マッピングの設定  
&#x2713; キャラクターの Movement 関数の実装  
&#x2713; マウスによるカメラ制御の実装  
&#x2713; キャラクターのジャンプの実装  
&#x2713; キャラクターにメッシュを追加  
&#x2713; カメラビューの変更  
&#x2713; 一人称メッシュをキャラクターに追加  

これで次のセクションで発射物の実装について学ぶ準備が整いました。

%Steps%