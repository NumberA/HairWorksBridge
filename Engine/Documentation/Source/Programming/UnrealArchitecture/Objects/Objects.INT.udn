Availability:Public
Title: Objects
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:Explanations of the basic gameplay elements, Actors and Objects.
Version: 4.9

[TOC (start:2 end:3)]



[EXCERPT:ObjectIntro]
Unreal has a robust system for handling game Objects. The base class for **Objects** in Unreal is `UObject`. The UCLASS macro can be used to tag classes derived from `UObject` so that the UObject handling
system is aware of them. 
[/EXCERPT:ObjectIntro]
It is not required or even appropriate to use this system in all cases, but there are many benefits to doing so, including:

*	Garbage collection
*	Reference updating
*	Reflection
*	Serialization
*	Automatic updating of default property changes
*	Automatic property initialization
*	Automatic editor integration
*	Type information available at runtime
*	Network replication

For more detail on each of these systems, see the [](Programming\UnrealArchitecture\Objects\Optimizations) documentation.

The **UCLASS* macro gives the UObject a reference to a UCLASS that describes its Unreal-based type. Each UCLASS maintains one Object called the "class default Object", or CDO for short. The CDO is 
essentially a default "template" Object, generated by the class constructor and unmodified thereafter. Both the UCLASS and the CDO can be retrieved for a given Object instance, though they should 
generally be considered read-only. The UCLASS for an Object instance can get accessed at any time using the GetClass() function.

A UCLASS contains a set of properties and functions that define the class. These are normal C++ functions and variables available to native code, but tagged with Unreal-specific metadata that controls 
how they behave within the Object system. For more details about the tagging syntax, see the [Programming Reference](Programming\UnrealArchitecture\Reference). 

Note that a UObject class can also include native-only properties that do not exist within the corresponding UCLASS. 


## Object Creation

There are several functions that can be used to create new `UObject` instances as well as the standard `new` operator; each of which have their own use case:

| Method | Description |
| --- | --- |
| [`NewObject<class>()`](Programming/UnrealArchitecture/Objects/Creation#NewObject) | Creates a new instance with an automatically generated name. Best practice to use for simple cases. |
| [`NewNamedObject<class>()`](Programming/UnrealArchitecture/Objects/Creation#NewNamedObject) | Creates a new instance using a specified name along with a few other optional parameters. Asserts if the name conflicts within the new instance's Outer. |
| [`ConstructObject<class>()`](Programming/UnrealArchitecture/Objects/Creation#ConstructObject) | Creates a new instance providing all available creation options. Use only when flexibility is required. |
| `new` | Use to construct Objects in certain low level circumstances, such as when the constructor requires arguments. |

See [](Programming/UnrealArchitecture/Objects/Creation) for detailed info on the various methods of creating instances of `UObject` classes for gameplay.

## Ticking

Ticking refers to how Objects are updated in Unreal Engine. All Objects have the ability to be ticked each frame, allowing you to perform any update calculations or actions that are necessary.

Objects do not possess any built-in update ability; however, this ability can be added when necessary by inheriting from the `FTickableGameObject` class using the `inherits` class specifier. 
They can then implement the `Tick()` function, which will be called each frame by the Engine.

